diff --git a/node_modules/@uniswap/sdk-core/.DS_Store b/node_modules/@uniswap/sdk-core/.DS_Store
new file mode 100644
index 0000000..ab08ed2
Binary files /dev/null and b/node_modules/@uniswap/sdk-core/.DS_Store differ
diff --git a/node_modules/@uniswap/sdk-core/dist/.DS_Store b/node_modules/@uniswap/sdk-core/dist/.DS_Store
new file mode 100644
index 0000000..ea2eaeb
Binary files /dev/null and b/node_modules/@uniswap/sdk-core/dist/.DS_Store differ
diff --git a/node_modules/@uniswap/sdk-core/dist/chains.d.ts b/node_modules/@uniswap/sdk-core/dist/chains.d.ts
index 6321b1d..2ec2217 100644
--- a/node_modules/@uniswap/sdk-core/dist/chains.d.ts
+++ b/node_modules/@uniswap/sdk-core/dist/chains.d.ts
@@ -13,12 +13,13 @@ export declare enum ChainId {
     GNOSIS = 100,
     MOONBEAM = 1284,
     BNB = 56,
+    UCHAIN = 792,
     AVALANCHE = 43114,
     BASE_GOERLI = 84531,
     BASE = 8453
 }
-export declare const SUPPORTED_CHAINS: readonly [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI];
-export declare type SupportedChainsType = typeof SUPPORTED_CHAINS[number];
+export declare const SUPPORTED_CHAINS: readonly [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.UCHAIN, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI];
+export declare type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number];
 export declare enum NativeCurrencyName {
     ETHER = "ETH",
     MATIC = "MATIC",
@@ -26,5 +27,6 @@ export declare enum NativeCurrencyName {
     GNOSIS = "XDAI",
     MOONBEAM = "GLMR",
     BNB = "BNB",
+    UCHAIN = "TBT",
     AVAX = "AVAX"
 }
diff --git a/node_modules/@uniswap/sdk-core/dist/index.js b/node_modules/@uniswap/sdk-core/dist/index.js
index c3473ea..a0dcfb3 100644
--- a/node_modules/@uniswap/sdk-core/dist/index.js
+++ b/node_modules/@uniswap/sdk-core/dist/index.js
@@ -6,3 +6,5 @@ if (process.env.NODE_ENV === 'production') {
 } else {
   module.exports = require('./sdk-core.cjs.development.js')
 }
+
+console.log('===> .........');
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js
index 521b395..5953686 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js
@@ -12,46 +12,6 @@ var toFormat = _interopDefault(require('toformat'));
 var bignumber = require('@ethersproject/bignumber');
 var address = require('@ethersproject/address');
 
-function _defineProperties(target, props) {
-  for (var i = 0; i < props.length; i++) {
-    var descriptor = props[i];
-    descriptor.enumerable = descriptor.enumerable || false;
-    descriptor.configurable = true;
-    if ("value" in descriptor) descriptor.writable = true;
-    Object.defineProperty(target, descriptor.key, descriptor);
-  }
-}
-
-function _createClass(Constructor, protoProps, staticProps) {
-  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
-  if (staticProps) _defineProperties(Constructor, staticProps);
-  return Constructor;
-}
-
-function _extends() {
-  _extends = Object.assign || function (target) {
-    for (var i = 1; i < arguments.length; i++) {
-      var source = arguments[i];
-
-      for (var key in source) {
-        if (Object.prototype.hasOwnProperty.call(source, key)) {
-          target[key] = source[key];
-        }
-      }
-    }
-
-    return target;
-  };
-
-  return _extends.apply(this, arguments);
-}
-
-function _inheritsLoose(subClass, superClass) {
-  subClass.prototype = Object.create(superClass.prototype);
-  subClass.prototype.constructor = subClass;
-  subClass.__proto__ = superClass;
-}
-
 (function (ChainId) {
   ChainId[ChainId["MAINNET"] = 1] = "MAINNET";
   ChainId[ChainId["GOERLI"] = 5] = "GOERLI";
@@ -67,13 +27,12 @@ function _inheritsLoose(subClass, superClass) {
   ChainId[ChainId["GNOSIS"] = 100] = "GNOSIS";
   ChainId[ChainId["MOONBEAM"] = 1284] = "MOONBEAM";
   ChainId[ChainId["BNB"] = 56] = "BNB";
+  ChainId[ChainId["UCHAIN"] = 792] = "UCHAIN";
   ChainId[ChainId["AVALANCHE"] = 43114] = "AVALANCHE";
   ChainId[ChainId["BASE_GOERLI"] = 84531] = "BASE_GOERLI";
   ChainId[ChainId["BASE"] = 8453] = "BASE";
 })(exports.ChainId || (exports.ChainId = {}));
-
-var SUPPORTED_CHAINS = [exports.ChainId.MAINNET, exports.ChainId.OPTIMISM, exports.ChainId.OPTIMISM_GOERLI, exports.ChainId.ARBITRUM_ONE, exports.ChainId.ARBITRUM_GOERLI, exports.ChainId.POLYGON, exports.ChainId.POLYGON_MUMBAI, exports.ChainId.GOERLI, exports.ChainId.SEPOLIA, exports.ChainId.CELO_ALFAJORES, exports.ChainId.CELO, exports.ChainId.BNB, exports.ChainId.AVALANCHE, exports.ChainId.BASE, exports.ChainId.BASE_GOERLI];
-
+const SUPPORTED_CHAINS = [exports.ChainId.MAINNET, exports.ChainId.OPTIMISM, exports.ChainId.OPTIMISM_GOERLI, exports.ChainId.ARBITRUM_ONE, exports.ChainId.ARBITRUM_GOERLI, exports.ChainId.POLYGON, exports.ChainId.POLYGON_MUMBAI, exports.ChainId.GOERLI, exports.ChainId.SEPOLIA, exports.ChainId.CELO_ALFAJORES, exports.ChainId.CELO, exports.ChainId.BNB, exports.ChainId.UCHAIN, exports.ChainId.AVALANCHE, exports.ChainId.BASE, exports.ChainId.BASE_GOERLI];
 (function (NativeCurrencyName) {
   // Strings match input for CLI
   NativeCurrencyName["ETHER"] = "ETH";
@@ -82,65 +41,60 @@ var SUPPORTED_CHAINS = [exports.ChainId.MAINNET, exports.ChainId.OPTIMISM, expor
   NativeCurrencyName["GNOSIS"] = "XDAI";
   NativeCurrencyName["MOONBEAM"] = "GLMR";
   NativeCurrencyName["BNB"] = "BNB";
+  NativeCurrencyName["UCHAIN"] = "TBT";
   NativeCurrencyName["AVAX"] = "AVAX";
 })(exports.NativeCurrencyName || (exports.NativeCurrencyName = {}));
 
-var _CHAIN_TO_ADDRESSES_M, _GOVERNANCE_ALPHA_V1_, _GOVERNANCE_BRAVO_ADD, _MERKLE_DISTRIBUTOR_A, _ARGENT_WALLET_DETECT, _SOCKS_CONTROLLER_ADD;
-var DEFAULT_NETWORKS = [exports.ChainId.MAINNET, exports.ChainId.GOERLI];
-
+const DEFAULT_NETWORKS = [exports.ChainId.MAINNET, exports.ChainId.GOERLI, exports.ChainId.SEPOLIA];
 function constructSameAddressMap(address, additionalNetworks) {
   if (additionalNetworks === void 0) {
     additionalNetworks = [];
   }
-
-  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce(function (memo, chainId) {
+  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce((memo, chainId) => {
     memo[chainId] = address;
     return memo;
   }, {});
 }
-
-var UNI_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [exports.ChainId.OPTIMISM, exports.ChainId.ARBITRUM_ONE, exports.ChainId.POLYGON, exports.ChainId.POLYGON_MUMBAI, exports.ChainId.SEPOLIA]);
-var UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78';
-var V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
-var V2_FACTORY_ADDRESSES = /*#__PURE__*/constructSameAddressMap(V2_FACTORY_ADDRESS);
-var V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
-var V2_ROUTER_ADDRESSES = /*#__PURE__*/constructSameAddressMap(V2_ROUTER_ADDRESS); // Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon
-
-var DEFAULT_ADDRESSES = {
+const UNI_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [exports.ChainId.OPTIMISM, exports.ChainId.ARBITRUM_ONE, exports.ChainId.POLYGON, exports.ChainId.POLYGON_MUMBAI, exports.ChainId.SEPOLIA]);
+const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78';
+const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
+const V2_FACTORY_ADDRESSES = /*#__PURE__*/constructSameAddressMap(V2_FACTORY_ADDRESS, [exports.ChainId.POLYGON, exports.ChainId.OPTIMISM, exports.ChainId.CELO, exports.ChainId.ARBITRUM_ONE, exports.ChainId.BNB, exports.ChainId.AVALANCHE, exports.ChainId.BASE]);
+const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
+const V2_ROUTER_ADDRESSES = /*#__PURE__*/constructSameAddressMap(V2_ROUTER_ADDRESS);
+// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon
+const DEFAULT_ADDRESSES = {
   v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
   multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',
   quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',
   v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',
   nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'
 };
-
-var MAINNET_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+const MAINNET_ADDRESSES = {
+  ...DEFAULT_ADDRESSES,
   v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'
-});
-
-var GOERLI_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+};
+const GOERLI_ADDRESSES = {
+  ...DEFAULT_ADDRESSES,
   v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'
-});
-
-var OPTIMISM_ADDRESSES = DEFAULT_ADDRESSES;
-
-var ARBITRUM_ONE_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+};
+const OPTIMISM_ADDRESSES = DEFAULT_ADDRESSES;
+const ARBITRUM_ONE_ADDRESSES = {
+  ...DEFAULT_ADDRESSES,
   multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',
   tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'
-});
-
-var POLYGON_ADDRESSES = DEFAULT_ADDRESSES; // celo v3 addresses
-
-var CELO_ADDRESSES = {
+};
+const POLYGON_ADDRESSES = DEFAULT_ADDRESSES;
+// celo v3 addresses
+const CELO_ADDRESSES = {
   v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',
   multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',
   quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',
   v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',
   nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',
   tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'
-}; // BNB v3 addresses
-
-var BNB_ADDRESSES = {
+};
+// BNB v3 addresses
+const BNB_ADDRESSES = {
   v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',
   multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',
   quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',
@@ -148,36 +102,45 @@ var BNB_ADDRESSES = {
   nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',
   tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',
   swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'
-}; // optimism goerli addresses
-
-var OPTIMISM_GOERLI_ADDRESSES = {
+};
+// celo v3 addresses
+const UCHAIN_ADDRESSES = {
+  v3CoreFactoryAddress: '0xD7F71EE33DCb17AAb183b6173423fD7C95866F32',
+  multicallAddress: '0x2621027bD033Ce003e34c6f4BaD927E366c0F5B5',
+  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',
+  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',
+  nonfungiblePositionManagerAddress: '0xc8b8d86996aaB4fc79c1630e2D2C7e7e7E5C583F',
+  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'
+};
+// optimism goerli addresses
+const OPTIMISM_GOERLI_ADDRESSES = {
   v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',
   multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',
   quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',
   v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',
   nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',
   tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'
-}; // arbitrum goerli v3 addresses
-
-var ARBITRUM_GOERLI_ADDRESSES = {
+};
+// arbitrum goerli v3 addresses
+const ARBITRUM_GOERLI_ADDRESSES = {
   v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',
   multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',
   quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',
   v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',
   nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',
   tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'
-}; // sepolia v3 addresses
-
-var SEPOLIA_ADDRESSES = {
+};
+// sepolia v3 addresses
+const SEPOLIA_ADDRESSES = {
   v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',
   multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',
   quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',
   v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',
   nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',
   tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07'
-}; // Avalanche v3 addresses
-
-var AVALANCHE_ADDRESSES = {
+};
+// Avalanche v3 addresses
+const AVALANCHE_ADDRESSES = {
   v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',
   multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',
   quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',
@@ -186,7 +149,7 @@ var AVALANCHE_ADDRESSES = {
   tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',
   swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'
 };
-var BASE_ADDRESSES = {
+const BASE_ADDRESSES = {
   v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',
   multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',
   quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',
@@ -194,9 +157,9 @@ var BASE_ADDRESSES = {
   nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',
   tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',
   swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'
-}; // Base Goerli v3 addresses
-
-var BASE_GOERLI_ADDRESSES = {
+};
+// Base Goerli v3 addresses
+const BASE_GOERLI_ADDRESSES = {
   v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',
   multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',
   quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',
@@ -205,82 +168,110 @@ var BASE_GOERLI_ADDRESSES = {
   tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',
   swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'
 };
-var CHAIN_TO_ADDRESSES_MAP = (_CHAIN_TO_ADDRESSES_M = {}, _CHAIN_TO_ADDRESSES_M[exports.ChainId.MAINNET] = MAINNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM] = OPTIMISM_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_ONE] = ARBITRUM_ONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.POLYGON] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.POLYGON_MUMBAI] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.GOERLI] = GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.CELO] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.CELO_ALFAJORES] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BNB] = BNB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM_GOERLI] = OPTIMISM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_GOERLI] = ARBITRUM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.SEPOLIA] = SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.AVALANCHE] = AVALANCHE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BASE] = BASE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BASE_GOERLI] = BASE_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M);
+const CHAIN_TO_ADDRESSES_MAP = {
+  [exports.ChainId.MAINNET]: MAINNET_ADDRESSES,
+  [exports.ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,
+  [exports.ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,
+  [exports.ChainId.POLYGON]: POLYGON_ADDRESSES,
+  [exports.ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,
+  [exports.ChainId.GOERLI]: GOERLI_ADDRESSES,
+  [exports.ChainId.CELO]: CELO_ADDRESSES,
+  [exports.ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,
+  [exports.ChainId.BNB]: BNB_ADDRESSES,
+  [exports.ChainId.UCHAIN]: UCHAIN_ADDRESSES,
+  [exports.ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,
+  [exports.ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,
+  [exports.ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,
+  [exports.ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,
+  [exports.ChainId.BASE]: BASE_ADDRESSES,
+  [exports.ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES
+};
 /* V3 Contract Addresses */
-
-var V3_CORE_FACTORY_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress;
-  return memo;
-}, {}));
-var V3_MIGRATOR_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  var v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress;
-
-  if (v3MigratorAddress) {
-    memo[chainId] = v3MigratorAddress;
-  }
-
-  return memo;
-}, {}));
-var MULTICALL_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress;
-  return memo;
-}, {}));
+const V3_CORE_FACTORY_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress;
+    return memo;
+  }, {})
+};
+const V3_MIGRATOR_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress;
+    if (v3MigratorAddress) {
+      memo[chainId] = v3MigratorAddress;
+    }
+    return memo;
+  }, {})
+};
+const MULTICALL_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress;
+    return memo;
+  }, {})
+};
 /**
  * The oldest V0 governance address
  */
-
-var GOVERNANCE_ALPHA_V0_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F');
+const GOVERNANCE_ALPHA_V0_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F');
 /**
  * The older V1 governance address
  */
-
-var GOVERNANCE_ALPHA_V1_ADDRESSES = (_GOVERNANCE_ALPHA_V1_ = {}, _GOVERNANCE_ALPHA_V1_[exports.ChainId.MAINNET] = '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6', _GOVERNANCE_ALPHA_V1_);
+const GOVERNANCE_ALPHA_V1_ADDRESSES = {
+  [exports.ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'
+};
 /**
  * The latest governor bravo that is currently admin of timelock
  */
-
-var GOVERNANCE_BRAVO_ADDRESSES = (_GOVERNANCE_BRAVO_ADD = {}, _GOVERNANCE_BRAVO_ADD[exports.ChainId.MAINNET] = '0x408ED6354d4973f66138C91495F2f2FCbd8724C3', _GOVERNANCE_BRAVO_ADD);
-var TIMELOCK_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC');
-var MERKLE_DISTRIBUTOR_ADDRESS = (_MERKLE_DISTRIBUTOR_A = {}, _MERKLE_DISTRIBUTOR_A[exports.ChainId.MAINNET] = '0x090D4613473dEE047c3f2706764f49E0821D256e', _MERKLE_DISTRIBUTOR_A);
-var ARGENT_WALLET_DETECTOR_ADDRESS = (_ARGENT_WALLET_DETECT = {}, _ARGENT_WALLET_DETECT[exports.ChainId.MAINNET] = '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8', _ARGENT_WALLET_DETECT);
-var QUOTER_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress;
-  return memo;
-}, {}));
-var NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  var nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress;
-
-  if (nonfungiblePositionManagerAddress) {
-    memo[chainId] = nonfungiblePositionManagerAddress;
-  }
-
-  return memo;
-}, {}));
-var ENS_REGISTRAR_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'));
-var SOCKS_CONTROLLER_ADDRESSES = (_SOCKS_CONTROLLER_ADD = {}, _SOCKS_CONTROLLER_ADD[exports.ChainId.MAINNET] = '0x65770b5283117639760beA3F867b69b3697a91dd', _SOCKS_CONTROLLER_ADD);
-var TICK_LENS_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  var tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress;
-
-  if (tickLensAddress) {
-    memo[chainId] = tickLensAddress;
-  }
-
-  return memo;
-}, {}));
-var MIXED_ROUTE_QUOTER_V1_ADDRESSES = /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  var v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress;
-
+const GOVERNANCE_BRAVO_ADDRESSES = {
+  [exports.ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'
+};
+const TIMELOCK_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC');
+const MERKLE_DISTRIBUTOR_ADDRESS = {
+  [exports.ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'
+};
+const ARGENT_WALLET_DETECTOR_ADDRESS = {
+  [exports.ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'
+};
+const QUOTER_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress;
+    return memo;
+  }, {})
+};
+const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress;
+    if (nonfungiblePositionManagerAddress) {
+      memo[chainId] = nonfungiblePositionManagerAddress;
+    }
+    return memo;
+  }, {})
+};
+const ENS_REGISTRAR_ADDRESSES = {
+  ... /*#__PURE__*/constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')
+};
+const SOCKS_CONTROLLER_ADDRESSES = {
+  [exports.ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'
+};
+const TICK_LENS_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress;
+    if (tickLensAddress) {
+      memo[chainId] = tickLensAddress;
+    }
+    return memo;
+  }, {})
+};
+const MIXED_ROUTE_QUOTER_V1_ADDRESSES = /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress;
   if (v1MixedRouteQuoterAddress) {
     memo[chainId] = v1MixedRouteQuoterAddress;
   }
-
   return memo;
 }, {});
-var SWAP_ROUTER_02_ADDRESSES = function SWAP_ROUTER_02_ADDRESSES(chainId) {
+const SWAP_ROUTER_02_ADDRESSES = chainId => {
   if (chainId == exports.ChainId.BNB) {
     return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address;
   }
-
   return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45';
 };
 
@@ -288,122 +279,113 @@ var SWAP_ROUTER_02_ADDRESSES = function SWAP_ROUTER_02_ADDRESSES(chainId) {
   TradeType[TradeType["EXACT_INPUT"] = 0] = "EXACT_INPUT";
   TradeType[TradeType["EXACT_OUTPUT"] = 1] = "EXACT_OUTPUT";
 })(exports.TradeType || (exports.TradeType = {}));
-
 (function (Rounding) {
   Rounding[Rounding["ROUND_DOWN"] = 0] = "ROUND_DOWN";
   Rounding[Rounding["ROUND_HALF_UP"] = 1] = "ROUND_HALF_UP";
   Rounding[Rounding["ROUND_UP"] = 2] = "ROUND_UP";
 })(exports.Rounding || (exports.Rounding = {}));
+const MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
+
+const Decimal = /*#__PURE__*/toFormat(_Decimal);
+const Big = /*#__PURE__*/toFormat(_Big);
+const toSignificantRounding = {
+  [exports.Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,
+  [exports.Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,
+  [exports.Rounding.ROUND_UP]: Decimal.ROUND_UP
+};
+const toFixedRounding = {
+  [exports.Rounding.ROUND_DOWN]: 0 /* RoundDown */,
+  [exports.Rounding.ROUND_HALF_UP]: 1 /* RoundHalfUp */,
+  [exports.Rounding.ROUND_UP]: 3 /* RoundUp */
+};
 
-var MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
-
-var _toSignificantRoundin, _toFixedRounding;
-var Decimal = /*#__PURE__*/toFormat(_Decimal);
-var Big = /*#__PURE__*/toFormat(_Big);
-var toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[exports.Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[exports.Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[exports.Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);
-var toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[exports.Rounding.ROUND_DOWN] = 0, _toFixedRounding[exports.Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[exports.Rounding.ROUND_UP] = 3, _toFixedRounding);
-var Fraction = /*#__PURE__*/function () {
-  function Fraction(numerator, denominator) {
+class Fraction {
+  constructor(numerator, denominator) {
     if (denominator === void 0) {
       denominator = JSBI.BigInt(1);
     }
-
     this.numerator = JSBI.BigInt(numerator);
     this.denominator = JSBI.BigInt(denominator);
   }
-
-  Fraction.tryParseFraction = function tryParseFraction(fractionish) {
+  static tryParseFraction(fractionish) {
     if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string') return new Fraction(fractionish);
     if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;
     throw new Error('Could not parse fraction');
-  } // performs floor division
-  ;
-
-  var _proto = Fraction.prototype;
-
-  _proto.invert = function invert() {
+  }
+  // performs floor division
+  get quotient() {
+    return JSBI.divide(this.numerator, this.denominator);
+  }
+  // remainder after floor division
+  get remainder() {
+    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);
+  }
+  invert() {
     return new Fraction(this.denominator, this.numerator);
-  };
-
-  _proto.add = function add(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
-
+  }
+  add(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     if (JSBI.equal(this.denominator, otherParsed.denominator)) {
       return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);
     }
-
     return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));
-  };
-
-  _proto.subtract = function subtract(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
-
+  }
+  subtract(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     if (JSBI.equal(this.denominator, otherParsed.denominator)) {
       return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);
     }
-
     return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));
-  };
-
-  _proto.lessThan = function lessThan(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  lessThan(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
-  };
-
-  _proto.equalTo = function equalTo(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  equalTo(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
-  };
-
-  _proto.greaterThan = function greaterThan(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  greaterThan(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
-  };
-
-  _proto.multiply = function multiply(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  multiply(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));
-  };
-
-  _proto.divide = function divide(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  divide(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));
-  };
-
-  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+  }
+  toSignificant(significantDigits, format, rounding) {
     if (format === void 0) {
       format = {
         groupSeparator: ''
       };
     }
-
     if (rounding === void 0) {
       rounding = exports.Rounding.ROUND_HALF_UP;
     }
-
-    !Number.isInteger(significantDigits) ?  invariant(false, significantDigits + " is not an integer.")  : void 0;
-    !(significantDigits > 0) ?  invariant(false, significantDigits + " is not positive.")  : void 0;
+    !Number.isInteger(significantDigits) ?  invariant(false, `${significantDigits} is not an integer.`)  : void 0;
+    !(significantDigits > 0) ?  invariant(false, `${significantDigits} is not positive.`)  : void 0;
     Decimal.set({
       precision: significantDigits + 1,
       rounding: toSignificantRounding[rounding]
     });
-    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);
+    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);
     return quotient.toFormat(quotient.decimalPlaces(), format);
-  };
-
-  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+  }
+  toFixed(decimalPlaces, format, rounding) {
     if (format === void 0) {
       format = {
         groupSeparator: ''
       };
     }
-
     if (rounding === void 0) {
       rounding = exports.Rounding.ROUND_HALF_UP;
     }
-
-    !Number.isInteger(decimalPlaces) ?  invariant(false, decimalPlaces + " is not an integer.")  : void 0;
-    !(decimalPlaces >= 0) ?  invariant(false, decimalPlaces + " is negative.")  : void 0;
+    !Number.isInteger(decimalPlaces) ?  invariant(false, `${decimalPlaces} is not an integer.`)  : void 0;
+    !(decimalPlaces >= 0) ?  invariant(false, `${decimalPlaces} is negative.`)  : void 0;
     Big.DP = decimalPlaces;
     Big.RM = toFixedRounding[rounding];
     return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);
@@ -411,50 +393,25 @@ var Fraction = /*#__PURE__*/function () {
   /**
    * Helper method for converting any super class back to a fraction
    */
-  ;
-
-  _createClass(Fraction, [{
-    key: "quotient",
-    get: function get() {
-      return JSBI.divide(this.numerator, this.denominator);
-    } // remainder after floor division
-
-  }, {
-    key: "remainder",
-    get: function get() {
-      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);
-    }
-  }, {
-    key: "asFraction",
-    get: function get() {
-      return new Fraction(this.numerator, this.denominator);
-    }
-  }]);
-
-  return Fraction;
-}();
-
-var Big$1 = /*#__PURE__*/toFormat(_Big);
-var CurrencyAmount = /*#__PURE__*/function (_Fraction) {
-  _inheritsLoose(CurrencyAmount, _Fraction);
-
-  function CurrencyAmount(currency, numerator, denominator) {
-    var _this;
+  get asFraction() {
+    return new Fraction(this.numerator, this.denominator);
+  }
+}
 
-    _this = _Fraction.call(this, numerator, denominator) || this;
-    !JSBI.lessThanOrEqual(_this.quotient, MaxUint256) ?  invariant(false, 'AMOUNT')  : void 0;
-    _this.currency = currency;
-    _this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));
-    return _this;
+const Big$1 = /*#__PURE__*/toFormat(_Big);
+class CurrencyAmount extends Fraction {
+  constructor(currency, numerator, denominator) {
+    super(numerator, denominator);
+    !JSBI.lessThanOrEqual(this.quotient, MaxUint256) ?  invariant(false, 'AMOUNT')  : void 0;
+    this.currency = currency;
+    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));
   }
   /**
    * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount
    * @param currency the currency in the amount
    * @param rawAmount the raw token or ether amount
    */
-
-
-  CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {
+  static fromRawAmount(currency, rawAmount) {
     return new CurrencyAmount(currency, rawAmount);
   }
   /**
@@ -463,329 +420,229 @@ var CurrencyAmount = /*#__PURE__*/function (_Fraction) {
    * @param numerator the numerator of the fractional token amount
    * @param denominator the denominator of the fractional token amount
    */
-  ;
-
-  CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {
+  static fromFractionalAmount(currency, numerator, denominator) {
     return new CurrencyAmount(currency, numerator, denominator);
-  };
-
-  var _proto = CurrencyAmount.prototype;
-
-  _proto.add = function add(other) {
+  }
+  add(other) {
     !this.currency.equals(other.currency) ?  invariant(false, 'CURRENCY')  : void 0;
-
-    var added = _Fraction.prototype.add.call(this, other);
-
+    const added = super.add(other);
     return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);
-  };
-
-  _proto.subtract = function subtract(other) {
+  }
+  subtract(other) {
     !this.currency.equals(other.currency) ?  invariant(false, 'CURRENCY')  : void 0;
-
-    var subtracted = _Fraction.prototype.subtract.call(this, other);
-
+    const subtracted = super.subtract(other);
     return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);
-  };
-
-  _proto.multiply = function multiply(other) {
-    var multiplied = _Fraction.prototype.multiply.call(this, other);
-
+  }
+  multiply(other) {
+    const multiplied = super.multiply(other);
     return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);
-  };
-
-  _proto.divide = function divide(other) {
-    var divided = _Fraction.prototype.divide.call(this, other);
-
+  }
+  divide(other) {
+    const divided = super.divide(other);
     return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);
-  };
-
-  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+  }
+  toSignificant(significantDigits, format, rounding) {
     if (significantDigits === void 0) {
       significantDigits = 6;
     }
-
     if (rounding === void 0) {
       rounding = exports.Rounding.ROUND_DOWN;
     }
-
-    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);
-  };
-
-  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding);
+  }
+  toFixed(decimalPlaces, format, rounding) {
     if (decimalPlaces === void 0) {
       decimalPlaces = this.currency.decimals;
     }
-
     if (rounding === void 0) {
       rounding = exports.Rounding.ROUND_DOWN;
     }
-
     !(decimalPlaces <= this.currency.decimals) ?  invariant(false, 'DECIMALS')  : void 0;
-    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);
-  };
-
-  _proto.toExact = function toExact(format) {
+    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding);
+  }
+  toExact(format) {
     if (format === void 0) {
       format = {
         groupSeparator: ''
       };
     }
-
     Big$1.DP = this.currency.decimals;
     return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);
-  };
-
-  _createClass(CurrencyAmount, [{
-    key: "wrapped",
-    get: function get() {
-      if (this.currency.isToken) return this;
-      return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);
-    }
-  }]);
-
-  return CurrencyAmount;
-}(Fraction);
+  }
+  get wrapped() {
+    if (this.currency.isToken) return this;
+    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);
+  }
+}
 
-var ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));
+const ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));
 /**
  * Converts a fraction to a percent
  * @param fraction the fraction to convert
  */
-
 function toPercent(fraction) {
   return new Percent(fraction.numerator, fraction.denominator);
 }
-
-var Percent = /*#__PURE__*/function (_Fraction) {
-  _inheritsLoose(Percent, _Fraction);
-
-  function Percent() {
-    var _this;
-
-    _this = _Fraction.apply(this, arguments) || this;
+class Percent extends Fraction {
+  constructor() {
+    super(...arguments);
     /**
      * This boolean prevents a fraction from being interpreted as a Percent
      */
-
-    _this.isPercent = true;
-    return _this;
+    this.isPercent = true;
   }
-
-  var _proto = Percent.prototype;
-
-  _proto.add = function add(other) {
-    return toPercent(_Fraction.prototype.add.call(this, other));
-  };
-
-  _proto.subtract = function subtract(other) {
-    return toPercent(_Fraction.prototype.subtract.call(this, other));
-  };
-
-  _proto.multiply = function multiply(other) {
-    return toPercent(_Fraction.prototype.multiply.call(this, other));
-  };
-
-  _proto.divide = function divide(other) {
-    return toPercent(_Fraction.prototype.divide.call(this, other));
-  };
-
-  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+  add(other) {
+    return toPercent(super.add(other));
+  }
+  subtract(other) {
+    return toPercent(super.subtract(other));
+  }
+  multiply(other) {
+    return toPercent(super.multiply(other));
+  }
+  divide(other) {
+    return toPercent(super.divide(other));
+  }
+  toSignificant(significantDigits, format, rounding) {
     if (significantDigits === void 0) {
       significantDigits = 5;
     }
-
-    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);
-  };
-
-  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);
+  }
+  toFixed(decimalPlaces, format, rounding) {
     if (decimalPlaces === void 0) {
       decimalPlaces = 2;
     }
+    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);
+  }
+}
 
-    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);
-  };
-
-  return Percent;
-}(Fraction);
-
-var Price = /*#__PURE__*/function (_Fraction) {
-  _inheritsLoose(Price, _Fraction);
-
+class Price extends Fraction {
   /**
    * Construct a price, either with the base and quote currency amount, or the
    * @param args
    */
-  function Price() {
-    var _this;
-
-    var baseCurrency, quoteCurrency, denominator, numerator;
-
+  constructor() {
+    let baseCurrency, quoteCurrency, denominator, numerator;
     for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
       args[_key] = arguments[_key];
     }
-
     if (args.length === 4) {
-      baseCurrency = args[0];
-      quoteCurrency = args[1];
-      denominator = args[2];
-      numerator = args[3];
+      [baseCurrency, quoteCurrency, denominator, numerator] = args;
     } else {
-      var result = args[0].quoteAmount.divide(args[0].baseAmount);
-      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];
-      baseCurrency = _ref[0];
-      quoteCurrency = _ref[1];
-      denominator = _ref[2];
-      numerator = _ref[3];
+      const result = args[0].quoteAmount.divide(args[0].baseAmount);
+      [baseCurrency, quoteCurrency, denominator, numerator] = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];
     }
-
-    _this = _Fraction.call(this, numerator, denominator) || this;
-    _this.baseCurrency = baseCurrency;
-    _this.quoteCurrency = quoteCurrency;
-    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));
-    return _this;
+    super(numerator, denominator);
+    this.baseCurrency = baseCurrency;
+    this.quoteCurrency = quoteCurrency;
+    this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));
   }
   /**
    * Flip the price, switching the base and quote currency
    */
-
-
-  var _proto = Price.prototype;
-
-  _proto.invert = function invert() {
+  invert() {
     return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);
   }
   /**
    * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency
    * @param other the other price
    */
-  ;
-
-  _proto.multiply = function multiply(other) {
+  multiply(other) {
     !this.quoteCurrency.equals(other.baseCurrency) ?  invariant(false, 'TOKEN')  : void 0;
-
-    var fraction = _Fraction.prototype.multiply.call(this, other);
-
+    const fraction = super.multiply(other);
     return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);
   }
   /**
    * Return the amount of quote currency corresponding to a given amount of the base currency
    * @param currencyAmount the amount of base currency to quote against the price
    */
-  ;
-
-  _proto.quote = function quote(currencyAmount) {
+  quote(currencyAmount) {
     !currencyAmount.currency.equals(this.baseCurrency) ?  invariant(false, 'TOKEN')  : void 0;
-
-    var result = _Fraction.prototype.multiply.call(this, currencyAmount);
-
+    const result = super.multiply(currencyAmount);
     return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);
   }
   /**
    * Get the value scaled by decimals for formatting
    * @private
    */
-  ;
-
-  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+  get adjustedForDecimals() {
+    return super.multiply(this.scalar);
+  }
+  toSignificant(significantDigits, format, rounding) {
     if (significantDigits === void 0) {
       significantDigits = 6;
     }
-
     return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);
-  };
-
-  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+  }
+  toFixed(decimalPlaces, format, rounding) {
     if (decimalPlaces === void 0) {
       decimalPlaces = 4;
     }
-
     return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);
-  };
-
-  _createClass(Price, [{
-    key: "adjustedForDecimals",
-    get: function get() {
-      return _Fraction.prototype.multiply.call(this, this.scalar);
-    }
-  }]);
-
-  return Price;
-}(Fraction);
+  }
+}
 
 /**
  * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies
  */
-
-var BaseCurrency =
-/**
- * Constructs an instance of the base class `BaseCurrency`.
- * @param chainId the chain ID on which this currency resides
- * @param decimals decimals of the currency
- * @param symbol symbol of the currency
- * @param name of the currency
- */
-function BaseCurrency(chainId, decimals, symbol, name) {
-  !Number.isSafeInteger(chainId) ?  invariant(false, 'CHAIN_ID')  : void 0;
-  !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ?  invariant(false, 'DECIMALS')  : void 0;
-  this.chainId = chainId;
-  this.decimals = decimals;
-  this.symbol = symbol;
-  this.name = name;
-};
+class BaseCurrency {
+  /**
+   * Constructs an instance of the base class `BaseCurrency`.
+   * @param chainId the chain ID on which this currency resides
+   * @param decimals decimals of the currency
+   * @param symbol symbol of the currency
+   * @param name of the currency
+   */
+  constructor(chainId, decimals, symbol, name) {
+    !Number.isSafeInteger(chainId) ?  invariant(false, 'CHAIN_ID')  : void 0;
+    !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ?  invariant(false, 'DECIMALS')  : void 0;
+    this.chainId = chainId;
+    this.decimals = decimals;
+    this.symbol = symbol;
+    this.name = name;
+  }
+}
 
 /**
  * Represents the native currency of the chain on which it resides, e.g.
  */
-
-var NativeCurrency = /*#__PURE__*/function (_BaseCurrency) {
-  _inheritsLoose(NativeCurrency, _BaseCurrency);
-
-  function NativeCurrency() {
-    var _this;
-
-    _this = _BaseCurrency.apply(this, arguments) || this;
-    _this.isNative = true;
-    _this.isToken = false;
-    return _this;
+class NativeCurrency extends BaseCurrency {
+  constructor() {
+    super(...arguments);
+    this.isNative = true;
+    this.isToken = false;
   }
-
-  return NativeCurrency;
-}(BaseCurrency);
+}
 
 /**
  * Validates an address and returns the parsed (checksummed) version of that address
  * @param address the unchecksummed hex address
  */
-
 function validateAndParseAddress(address$1) {
   try {
     return address.getAddress(address$1);
   } catch (error) {
-    throw new Error(address$1 + " is not a valid address.");
+    throw new Error(`${address$1} is not a valid address.`);
   }
-} // Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x
-
-var startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;
+}
+// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x
+const startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;
 /**
  * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.
  * @param address the unchecksummed hex address
  */
-
 function checkValidAddress(address) {
   if (startsWith0xLen42HexRegex.test(address)) {
     return address;
   }
-
-  throw new Error(address + " is not a valid address.");
+  throw new Error(`${address} is not a valid address.`);
 }
 
 /**
  * Represents an ERC20 token with a unique address and some metadata.
  */
-
-var Token = /*#__PURE__*/function (_BaseCurrency) {
-  _inheritsLoose(Token, _BaseCurrency);
-
+class Token extends BaseCurrency {
   /**
    *
    * @param chainId {@link BaseCurrency#chainId}
@@ -797,40 +654,29 @@ var Token = /*#__PURE__*/function (_BaseCurrency) {
    * @param buyFeeBps Buy fee tax for FOT tokens, in basis points
    * @param sellFeeBps Sell fee tax for FOT tokens, in basis points
    */
-  function Token(chainId, address, decimals, symbol, name, bypassChecksum, buyFeeBps, sellFeeBps) {
-    var _this;
-
-    _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;
-    _this.isNative = false;
-    _this.isToken = true;
-
+  constructor(chainId, address, decimals, symbol, name, bypassChecksum, buyFeeBps, sellFeeBps) {
+    super(chainId, decimals, symbol, name);
+    this.isNative = false;
+    this.isToken = true;
     if (bypassChecksum) {
-      _this.address = checkValidAddress(address);
+      this.address = checkValidAddress(address);
     } else {
-      _this.address = validateAndParseAddress(address);
+      this.address = validateAndParseAddress(address);
     }
-
     if (buyFeeBps) {
       !buyFeeBps.gte(bignumber.BigNumber.from(0)) ?  invariant(false, 'NON-NEGATIVE FOT FEES')  : void 0;
     }
-
     if (sellFeeBps) {
       !sellFeeBps.gte(bignumber.BigNumber.from(0)) ?  invariant(false, 'NON-NEGATIVE FOT FEES')  : void 0;
     }
-
-    _this.buyFeeBps = buyFeeBps;
-    _this.sellFeeBps = sellFeeBps;
-    return _this;
+    this.buyFeeBps = buyFeeBps;
+    this.sellFeeBps = sellFeeBps;
   }
   /**
    * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
    * @param other other token to compare
    */
-
-
-  var _proto = Token.prototype;
-
-  _proto.equals = function equals(other) {
+  equals(other) {
     return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase();
   }
   /**
@@ -839,9 +685,7 @@ var Token = /*#__PURE__*/function (_BaseCurrency) {
    * @throws if the tokens have the same address
    * @throws if the tokens are on different chains
    */
-  ;
-
-  _proto.sortsBefore = function sortsBefore(other) {
+  sortsBefore(other) {
     !(this.chainId === other.chainId) ?  invariant(false, 'CHAIN_IDS')  : void 0;
     !(this.address.toLowerCase() !== other.address.toLowerCase()) ?  invariant(false, 'ADDRESSES')  : void 0;
     return this.address.toLowerCase() < other.address.toLowerCase();
@@ -849,59 +693,50 @@ var Token = /*#__PURE__*/function (_BaseCurrency) {
   /**
    * Return this token, which does not need to be wrapped
    */
-  ;
-
-  _createClass(Token, [{
-    key: "wrapped",
-    get: function get() {
-      return this;
-    }
-  }]);
-
-  return Token;
-}(BaseCurrency);
+  get wrapped() {
+    return this;
+  }
+}
 
-var _WETH;
 /**
  * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped
  */
-
-var WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH);
+const WETH9 = {
+  [1]: /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),
+  [3]: /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),
+  [4]: /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),
+  [5]: /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),
+  [42]: /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),
+  [10]: /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  [69]: /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  [42161]: /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),
+  [421611]: /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),
+  [8453]: /*#__PURE__*/new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  [56]: /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),
+  [792]: /*#__PURE__*/new Token(792, '0x1D7A42e67F9C5592d1927a7B47e32Ae809561fE0', 18, 'WTBT', 'Wrapped TBT'),
+  [137]: /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),
+  [43114]: /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')
+};
 
 /**
  * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets
  */
-
-var Ether = /*#__PURE__*/function (_NativeCurrency) {
-  _inheritsLoose(Ether, _NativeCurrency);
-
-  function Ether(chainId) {
-    return _NativeCurrency.call(this, chainId, 18, 'ETH', 'Ether') || this;
+class Ether extends NativeCurrency {
+  constructor(chainId) {
+    super(chainId, 18, 'ETH', 'Ether');
   }
-
-  Ether.onChain = function onChain(chainId) {
-    var _this$_etherCache$cha;
-
-    return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether(chainId);
-  };
-
-  var _proto = Ether.prototype;
-
-  _proto.equals = function equals(other) {
+  get wrapped() {
+    const weth9 = WETH9[this.chainId];
+    !!!weth9 ?  invariant(false, 'WRAPPED')  : void 0;
+    return weth9;
+  }
+  static onChain(chainId) {
+    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId));
+  }
+  equals(other) {
     return other.isNative && other.chainId === this.chainId;
-  };
-
-  _createClass(Ether, [{
-    key: "wrapped",
-    get: function get() {
-      var weth9 = WETH9[this.chainId];
-      !!!weth9 ?  invariant(false, 'WRAPPED')  : void 0;
-      return weth9;
-    }
-  }]);
-
-  return Ether;
-}(NativeCurrency);
+  }
+}
 Ether._etherCache = {};
 
 /**
@@ -910,75 +745,66 @@ Ether._etherCache = {};
  * @param inputAmount the input amount of the trade
  * @param outputAmount the output amount of the trade
  */
-
 function computePriceImpact(midPrice, inputAmount, outputAmount) {
-  var quotedOutputAmount = midPrice.quote(inputAmount); // calculate price impact := (exactQuote - outputAmount) / exactQuote
-
-  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);
+  const quotedOutputAmount = midPrice.quote(inputAmount);
+  // calculate price impact := (exactQuote - outputAmount) / exactQuote
+  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);
   return new Percent(priceImpact.numerator, priceImpact.denominator);
 }
 
+// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to
 // `maxSize` by removing the last item
-
 function sortedInsert(items, add, maxSize, comparator) {
-  !(maxSize > 0) ?  invariant(false, 'MAX_SIZE_ZERO')  : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize
-
-  !(items.length <= maxSize) ?  invariant(false, 'ITEMS_SIZE')  : void 0; // short circuit first item add
-
+  !(maxSize > 0) ?  invariant(false, 'MAX_SIZE_ZERO')  : void 0;
+  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize
+  !(items.length <= maxSize) ?  invariant(false, 'ITEMS_SIZE')  : void 0;
+  // short circuit first item add
   if (items.length === 0) {
     items.push(add);
     return null;
   } else {
-    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item
-
+    const isFull = items.length === maxSize;
+    // short circuit if full and the additional item does not come before the last item
     if (isFull && comparator(items[items.length - 1], add) <= 0) {
       return add;
     }
-
-    var lo = 0,
-        hi = items.length;
-
+    let lo = 0,
+      hi = items.length;
     while (lo < hi) {
-      var mid = lo + hi >>> 1;
-
+      const mid = lo + hi >>> 1;
       if (comparator(items[mid], add) <= 0) {
         lo = mid + 1;
       } else {
         hi = mid;
       }
     }
-
     items.splice(lo, 0, add);
     return isFull ? items.pop() : null;
   }
 }
 
-var MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);
-var ZERO = /*#__PURE__*/JSBI.BigInt(0);
-var ONE = /*#__PURE__*/JSBI.BigInt(1);
-var TWO = /*#__PURE__*/JSBI.BigInt(2);
+const MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);
+const ZERO = /*#__PURE__*/JSBI.BigInt(0);
+const ONE = /*#__PURE__*/JSBI.BigInt(1);
+const TWO = /*#__PURE__*/JSBI.BigInt(2);
 /**
  * Computes floor(sqrt(value))
  * @param value the value for which to compute the square root, rounded down
  */
-
 function sqrt(value) {
-  !JSBI.greaterThanOrEqual(value, ZERO) ?  invariant(false, 'NEGATIVE')  : void 0; // rely on built in sqrt if possible
-
+  !JSBI.greaterThanOrEqual(value, ZERO) ?  invariant(false, 'NEGATIVE')  : void 0;
+  // rely on built in sqrt if possible
   if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {
     return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));
   }
-
-  var z;
-  var x;
+  let z;
+  let x;
   z = value;
   x = JSBI.add(JSBI.divide(value, TWO), ONE);
-
   while (JSBI.lessThan(x, z)) {
     z = x;
     x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);
   }
-
   return z;
 }
 
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map
index a287db5..d4a025f 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = constructSameAddressMap(V2_FACTORY_ADDRESS)\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = constructSameAddressMap(V2_ROUTER_ADDRESS)\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (chainId == ChainId.BNB) {\n    return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\n  }\n  return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","ARBITRUM_ONE","ARBITRUM_GOERLI","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  UCHAIN = 792,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.UCHAIN,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  UCHAIN = 'TBT',\n  AVAX = 'AVAX',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = constructSameAddressMap(V2_FACTORY_ADDRESS, [\n  ChainId.POLYGON,\n  ChainId.OPTIMISM,\n  ChainId.CELO,\n  ChainId.ARBITRUM_ONE,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n])\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = constructSameAddressMap(V2_ROUTER_ADDRESS)\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// celo v3 addresses\nconst UCHAIN_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xD7F71EE33DCb17AAb183b6173423fD7C95866F32',\n  multicallAddress: '0x2621027bD033Ce003e34c6f4BaD927E366c0F5B5',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0xc8b8d86996aaB4fc79c1630e2D2C7e7e7E5C583F',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.UCHAIN]: UCHAIN_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (chainId == ChainId.BNB) {\n    return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\n  }\n  return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [792]: new Token(792, '0x1D7A42e67F9C5592d1927a7B47e32Ae809561fE0', 18, 'WTBT', 'Wrapped TBT'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","ARBITRUM_ONE","ARBITRUM_GOERLI","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","UCHAIN","AVALANCHE","BASE","BASE_GOERLI","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","UCHAIN_ADDRESSES","OPTIMISM_GOERLI_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","constructor","numerator","denominator","tryParseFraction","fractionish","Error","quotient","divide","remainder","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","asFraction","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","wrapped","isToken","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","weth9","onChain","_etherCache","isNative","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js
index 51f0c24..3e7d2b5 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r,t=e(require("jsbi")),n=e(require("tiny-invariant")),o=e(require("decimal.js-light")),i=e(require("big.js")),a=e(require("toformat")),d=require("@ethersproject/bignumber"),s=require("@ethersproject/address");function u(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e,r,t){return r&&u(e.prototype,r),t&&u(e,t),e}function A(){return(A=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}function f(e,r){e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r}(r=exports.ChainId||(exports.ChainId={}))[r.MAINNET=1]="MAINNET",r[r.GOERLI=5]="GOERLI",r[r.SEPOLIA=11155111]="SEPOLIA",r[r.OPTIMISM=10]="OPTIMISM",r[r.OPTIMISM_GOERLI=420]="OPTIMISM_GOERLI",r[r.ARBITRUM_ONE=42161]="ARBITRUM_ONE",r[r.ARBITRUM_GOERLI=421613]="ARBITRUM_GOERLI",r[r.POLYGON=137]="POLYGON",r[r.POLYGON_MUMBAI=80001]="POLYGON_MUMBAI",r[r.CELO=42220]="CELO",r[r.CELO_ALFAJORES=44787]="CELO_ALFAJORES",r[r.GNOSIS=100]="GNOSIS",r[r.MOONBEAM=1284]="MOONBEAM",r[r.BNB=56]="BNB",r[r.AVALANCHE=43114]="AVALANCHE",r[r.BASE_GOERLI=84531]="BASE_GOERLI",r[r.BASE=8453]="BASE";var E,p,l,C,h,x,D,m=[exports.ChainId.MAINNET,exports.ChainId.OPTIMISM,exports.ChainId.OPTIMISM_GOERLI,exports.ChainId.ARBITRUM_ONE,exports.ChainId.ARBITRUM_GOERLI,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA,exports.ChainId.CELO_ALFAJORES,exports.ChainId.CELO,exports.ChainId.BNB,exports.ChainId.AVALANCHE,exports.ChainId.BASE,exports.ChainId.BASE_GOERLI];(E=exports.NativeCurrencyName||(exports.NativeCurrencyName={})).ETHER="ETH",E.MATIC="MATIC",E.CELO="CELO",E.GNOSIS="XDAI",E.MOONBEAM="GLMR",E.BNB="BNB",E.AVAX="AVAX";var F=[exports.ChainId.MAINNET,exports.ChainId.GOERLI];function I(e,r){return void 0===r&&(r=[]),F.concat(r).reduce((function(r,t){return r[t]=e,r}),{})}var b,B,O=I("0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",[exports.ChainId.OPTIMISM,exports.ChainId.ARBITRUM_ONE,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.SEPOLIA]),R=I("0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"),S=I("0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"),y={v3CoreFactoryAddress:"0x1F98431c8aD98523631AE4a59f267346ea31F984",multicallAddress:"0x1F98415757620B543A52E61c46B32eB19261F984",quoterAddress:"0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6",v3MigratorAddress:"0xA5644E29708357803b5A882D272c41cC0dF92B34",nonfungiblePositionManagerAddress:"0xC36442b4a4522E871399CD717aBDD847Ab11FE88"},_=A({},y,{v1MixedRouteQuoterAddress:"0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E"}),v=A({},y,{v1MixedRouteQuoterAddress:"0xBa60b6e6fF25488308789E6e0A65D838be34194e"}),N=y,g=A({},y,{multicallAddress:"0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB",tickLensAddress:"0xbfd8137f7d1516D3ea5cA83523914859ec47F573"}),T=y,M={v3CoreFactoryAddress:"0xAfE208a311B21f13EF87E33A90049fC17A7acDEc",multicallAddress:"0x633987602DE5C4F337e3DbF265303A1080324204",quoterAddress:"0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8",v3MigratorAddress:"0x3cFd4d48EDfDCC53D3f173F596f621064614C582",nonfungiblePositionManagerAddress:"0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A",tickLensAddress:"0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D"},L=((p={})[exports.ChainId.MAINNET]=_,p[exports.ChainId.OPTIMISM]=N,p[exports.ChainId.ARBITRUM_ONE]=g,p[exports.ChainId.POLYGON]=T,p[exports.ChainId.POLYGON_MUMBAI]=T,p[exports.ChainId.GOERLI]=v,p[exports.ChainId.CELO]=M,p[exports.ChainId.CELO_ALFAJORES]=M,p[exports.ChainId.BNB]={v3CoreFactoryAddress:"0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7",multicallAddress:"0x963Df249eD09c358A4819E39d9Cd5736c3087184",quoterAddress:"0x78D78E420Da98ad378D7799bE8f4AF69033EB077",v3MigratorAddress:"0x32681814957e0C13117ddc0c2aba232b5c9e760f",nonfungiblePositionManagerAddress:"0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613",tickLensAddress:"0xD9270014D396281579760619CCf4c3af0501A47C",swapRouter02Address:"0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2"},p[exports.ChainId.OPTIMISM_GOERLI]={v3CoreFactoryAddress:"0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10",multicallAddress:"0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd",quoterAddress:"0x9569CbA925c8ca2248772A9A4976A516743A246F",v3MigratorAddress:"0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8",nonfungiblePositionManagerAddress:"0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6",tickLensAddress:"0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e"},p[exports.ChainId.ARBITRUM_GOERLI]={v3CoreFactoryAddress:"0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6",multicallAddress:"0x8260CB40247290317a4c062F3542622367F206Ee",quoterAddress:"0x1dd92b83591781D0C6d98d07391eea4b9a6008FA",v3MigratorAddress:"0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3",nonfungiblePositionManagerAddress:"0x622e4726a167799826d1E1D150b076A7725f5D81",tickLensAddress:"0xb52429333da969a0C79a60930a4Bf0020E5D1DE8"},p[exports.ChainId.SEPOLIA]={v3CoreFactoryAddress:"0x0227628f3F023bb0B980b67D528571c95c6DaC1c",multicallAddress:"0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07",quoterAddress:"0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3",v3MigratorAddress:"0x729004182cF005CEC8Bd85df140094b6aCbe8b15",nonfungiblePositionManagerAddress:"0x1238536071E1c677A632429e3655c799b22cDA52",tickLensAddress:"0xd7f33bcdb21b359c8ee6f0251d30e94832baad07"},p[exports.ChainId.AVALANCHE]={v3CoreFactoryAddress:"0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD",multicallAddress:"0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2",quoterAddress:"0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F",v3MigratorAddress:"0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97",nonfungiblePositionManagerAddress:"0x655C406EBFa14EE2006250925e54ec43AD184f8B",tickLensAddress:"0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950",swapRouter02Address:"0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE"},p[exports.ChainId.BASE]={v3CoreFactoryAddress:"0x33128a8fC17869897dcE68Ed026d694621f6FDfD",multicallAddress:"0x091e99cb1C49331a94dD62755D168E941AbD0693",quoterAddress:"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a",v3MigratorAddress:"0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7",nonfungiblePositionManagerAddress:"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1",tickLensAddress:"0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d",swapRouter02Address:"0x2626664c2603336E57B271c5C0b26F421741e481"},p[exports.ChainId.BASE_GOERLI]={v3CoreFactoryAddress:"0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2",multicallAddress:"0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439",quoterAddress:"0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9",v3MigratorAddress:"0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE",nonfungiblePositionManagerAddress:"0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30",tickLensAddress:"0x1acB873Ee909D0c98adB18e4474943249F931b92",swapRouter02Address:"0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d"},p),P=A({},m.reduce((function(e,r){return e[r]=L[r].v3CoreFactoryAddress,e}),{})),U=A({},m.reduce((function(e,r){var t=L[r].v3MigratorAddress;return t&&(e[r]=t),e}),{})),w=A({},m.reduce((function(e,r){return e[r]=L[r].multicallAddress,e}),{})),q=I("0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F"),G=((l={})[exports.ChainId.MAINNET]="0xC4e172459f1E7939D522503B81AFAaC1014CE6F6",l),W=((C={})[exports.ChainId.MAINNET]="0x408ED6354d4973f66138C91495F2f2FCbd8724C3",C),H=I("0x1a9C8182C09F50C8318d769245beA52c32BE35BC"),k=((h={})[exports.ChainId.MAINNET]="0x090D4613473dEE047c3f2706764f49E0821D256e",h),V=((x={})[exports.ChainId.MAINNET]="0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8",x),j=A({},m.reduce((function(e,r){return e[r]=L[r].quoterAddress,e}),{})),Y=A({},m.reduce((function(e,r){var t=L[r].nonfungiblePositionManagerAddress;return t&&(e[r]=t),e}),{})),X=A({},I("0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e")),Q=((D={})[exports.ChainId.MAINNET]="0x65770b5283117639760beA3F867b69b3697a91dd",D),J=A({},m.reduce((function(e,r){var t=L[r].tickLensAddress;return t&&(e[r]=t),e}),{})),K=m.reduce((function(e,r){var t=L[r].v1MixedRouteQuoterAddress;return t&&(e[r]=t),e}),{});(b=exports.TradeType||(exports.TradeType={}))[b.EXACT_INPUT=0]="EXACT_INPUT",b[b.EXACT_OUTPUT=1]="EXACT_OUTPUT",(B=exports.Rounding||(exports.Rounding={}))[B.ROUND_DOWN=0]="ROUND_DOWN",B[B.ROUND_HALF_UP=1]="ROUND_HALF_UP",B[B.ROUND_UP=2]="ROUND_UP";var $,z,Z=t.BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),ee=a(o),re=a(i),te=(($={})[exports.Rounding.ROUND_DOWN]=ee.ROUND_DOWN,$[exports.Rounding.ROUND_HALF_UP]=ee.ROUND_HALF_UP,$[exports.Rounding.ROUND_UP]=ee.ROUND_UP,$),ne=((z={})[exports.Rounding.ROUND_DOWN]=0,z[exports.Rounding.ROUND_HALF_UP]=1,z[exports.Rounding.ROUND_UP]=3,z),oe=function(){function e(e,r){void 0===r&&(r=t.BigInt(1)),this.numerator=t.BigInt(e),this.denominator=t.BigInt(r)}e.tryParseFraction=function(r){if(r instanceof t||"number"==typeof r||"string"==typeof r)return new e(r);if("numerator"in r&&"denominator"in r)return r;throw new Error("Could not parse fraction")};var r=e.prototype;return r.invert=function(){return new e(this.denominator,this.numerator)},r.add=function(r){var n=e.tryParseFraction(r);return t.equal(this.denominator,n.denominator)?new e(t.add(this.numerator,n.numerator),this.denominator):new e(t.add(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator)),t.multiply(this.denominator,n.denominator))},r.subtract=function(r){var n=e.tryParseFraction(r);return t.equal(this.denominator,n.denominator)?new e(t.subtract(this.numerator,n.numerator),this.denominator):new e(t.subtract(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator)),t.multiply(this.denominator,n.denominator))},r.lessThan=function(r){var n=e.tryParseFraction(r);return t.lessThan(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.equalTo=function(r){var n=e.tryParseFraction(r);return t.equal(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.greaterThan=function(r){var n=e.tryParseFraction(r);return t.greaterThan(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.multiply=function(r){var n=e.tryParseFraction(r);return new e(t.multiply(this.numerator,n.numerator),t.multiply(this.denominator,n.denominator))},r.divide=function(r){var n=e.tryParseFraction(r);return new e(t.multiply(this.numerator,n.denominator),t.multiply(this.denominator,n.numerator))},r.toSignificant=function(e,r,t){void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>0||n(!1),ee.set({precision:e+1,rounding:te[t]});var o=new ee(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(e);return o.toFormat(o.decimalPlaces(),r)},r.toFixed=function(e,r,t){return void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>=0||n(!1),re.DP=e,re.RM=ne[t],new re(this.numerator.toString()).div(this.denominator.toString()).toFormat(e,r)},c(e,[{key:"quotient",get:function(){return t.divide(this.numerator,this.denominator)}},{key:"remainder",get:function(){return new e(t.remainder(this.numerator,this.denominator),this.denominator)}},{key:"asFraction",get:function(){return new e(this.numerator,this.denominator)}}]),e}(),ie=a(i),ae=function(e){function r(r,o,i){var a;return a=e.call(this,o,i)||this,t.lessThanOrEqual(a.quotient,Z)||n(!1),a.currency=r,a.decimalScale=t.exponentiate(t.BigInt(10),t.BigInt(r.decimals)),a}f(r,e),r.fromRawAmount=function(e,t){return new r(e,t)},r.fromFractionalAmount=function(e,t,n){return new r(e,t,n)};var o=r.prototype;return o.add=function(t){this.currency.equals(t.currency)||n(!1);var o=e.prototype.add.call(this,t);return r.fromFractionalAmount(this.currency,o.numerator,o.denominator)},o.subtract=function(t){this.currency.equals(t.currency)||n(!1);var o=e.prototype.subtract.call(this,t);return r.fromFractionalAmount(this.currency,o.numerator,o.denominator)},o.multiply=function(t){var n=e.prototype.multiply.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},o.divide=function(t){var n=e.prototype.divide.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},o.toSignificant=function(r,t,n){return void 0===r&&(r=6),void 0===n&&(n=exports.Rounding.ROUND_DOWN),e.prototype.divide.call(this,this.decimalScale).toSignificant(r,t,n)},o.toFixed=function(r,t,o){return void 0===r&&(r=this.currency.decimals),void 0===o&&(o=exports.Rounding.ROUND_DOWN),r<=this.currency.decimals||n(!1),e.prototype.divide.call(this,this.decimalScale).toFixed(r,t,o)},o.toExact=function(e){return void 0===e&&(e={groupSeparator:""}),ie.DP=this.currency.decimals,new ie(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(e)},c(r,[{key:"wrapped",get:function(){return this.currency.isToken?this:r.fromFractionalAmount(this.currency.wrapped,this.numerator,this.denominator)}}]),r}(oe),de=new oe(t.BigInt(100));function se(e){return new ue(e.numerator,e.denominator)}var ue=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isPercent=!0,r}f(r,e);var t=r.prototype;return t.add=function(r){return se(e.prototype.add.call(this,r))},t.subtract=function(r){return se(e.prototype.subtract.call(this,r))},t.multiply=function(r){return se(e.prototype.multiply.call(this,r))},t.divide=function(r){return se(e.prototype.divide.call(this,r))},t.toSignificant=function(r,t,n){return void 0===r&&(r=5),e.prototype.multiply.call(this,de).toSignificant(r,t,n)},t.toFixed=function(r,t,n){return void 0===r&&(r=2),e.prototype.multiply.call(this,de).toFixed(r,t,n)},r}(oe),ce=function(e){function r(){for(var r,n,o,i,a,d=arguments.length,s=new Array(d),u=0;u<d;u++)s[u]=arguments[u];if(4===s.length)n=s[0],o=s[1],i=s[2],a=s[3];else{var c=s[0].quoteAmount.divide(s[0].baseAmount),A=[s[0].baseAmount.currency,s[0].quoteAmount.currency,c.denominator,c.numerator];n=A[0],o=A[1],i=A[2],a=A[3]}return(r=e.call(this,a,i)||this).baseCurrency=n,r.quoteCurrency=o,r.scalar=new oe(t.exponentiate(t.BigInt(10),t.BigInt(n.decimals)),t.exponentiate(t.BigInt(10),t.BigInt(o.decimals))),r}f(r,e);var o=r.prototype;return o.invert=function(){return new r(this.quoteCurrency,this.baseCurrency,this.numerator,this.denominator)},o.multiply=function(t){this.quoteCurrency.equals(t.baseCurrency)||n(!1);var o=e.prototype.multiply.call(this,t);return new r(this.baseCurrency,t.quoteCurrency,o.denominator,o.numerator)},o.quote=function(r){r.currency.equals(this.baseCurrency)||n(!1);var t=e.prototype.multiply.call(this,r);return ae.fromFractionalAmount(this.quoteCurrency,t.numerator,t.denominator)},o.toSignificant=function(e,r,t){return void 0===e&&(e=6),this.adjustedForDecimals.toSignificant(e,r,t)},o.toFixed=function(e,r,t){return void 0===e&&(e=4),this.adjustedForDecimals.toFixed(e,r,t)},c(r,[{key:"adjustedForDecimals",get:function(){return e.prototype.multiply.call(this,this.scalar)}}]),r}(oe),Ae=function(e,r,t,o){Number.isSafeInteger(e)||n(!1),r>=0&&r<255&&Number.isInteger(r)||n(!1),this.chainId=e,this.decimals=r,this.symbol=t,this.name=o},fe=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isNative=!0,r.isToken=!1,r}return f(r,e),r}(Ae);function Ee(e){try{return s.getAddress(e)}catch(r){throw new Error(e+" is not a valid address.")}}var pe,le=/^0x[0-9a-fA-F]{40}$/,Ce=function(e){function r(r,t,o,i,a,s,u,c){var A;return(A=e.call(this,r,o,i,a)||this).isNative=!1,A.isToken=!0,A.address=s?function(e){if(le.test(e))return e;throw new Error(e+" is not a valid address.")}(t):Ee(t),u&&(u.gte(d.BigNumber.from(0))||n(!1)),c&&(c.gte(d.BigNumber.from(0))||n(!1)),A.buyFeeBps=u,A.sellFeeBps=c,A}f(r,e);var t=r.prototype;return t.equals=function(e){return e.isToken&&this.chainId===e.chainId&&this.address.toLowerCase()===e.address.toLowerCase()},t.sortsBefore=function(e){return this.chainId!==e.chainId&&n(!1),this.address.toLowerCase()===e.address.toLowerCase()&&n(!1),this.address.toLowerCase()<e.address.toLowerCase()},c(r,[{key:"wrapped",get:function(){return this}}]),r}(Ae),he=((pe={})[1]=new Ce(1,"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",18,"WETH","Wrapped Ether"),pe[3]=new Ce(3,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),pe[4]=new Ce(4,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),pe[5]=new Ce(5,"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",18,"WETH","Wrapped Ether"),pe[42]=new Ce(42,"0xd0A1E359811322d97991E03f863a0C30C2cF029C",18,"WETH","Wrapped Ether"),pe[10]=new Ce(10,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[69]=new Ce(69,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[42161]=new Ce(42161,"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",18,"WETH","Wrapped Ether"),pe[421611]=new Ce(421611,"0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681",18,"WETH","Wrapped Ether"),pe),xe=function(e){function r(r){return e.call(this,r,18,"ETH","Ether")||this}return f(r,e),r.onChain=function(e){var t;return null!=(t=this._etherCache[e])?t:this._etherCache[e]=new r(e)},r.prototype.equals=function(e){return e.isNative&&e.chainId===this.chainId},c(r,[{key:"wrapped",get:function(){var e=he[this.chainId];return e||n(!1),e}}]),r}(fe);xe._etherCache={};var De=t.BigInt(Number.MAX_SAFE_INTEGER),me=t.BigInt(0),Fe=t.BigInt(1),Ie=t.BigInt(2);exports.ARGENT_WALLET_DETECTOR_ADDRESS=V,exports.CHAIN_TO_ADDRESSES_MAP=L,exports.CurrencyAmount=ae,exports.ENS_REGISTRAR_ADDRESSES=X,exports.Ether=xe,exports.Fraction=oe,exports.GOVERNANCE_ALPHA_V0_ADDRESSES=q,exports.GOVERNANCE_ALPHA_V1_ADDRESSES=G,exports.GOVERNANCE_BRAVO_ADDRESSES=W,exports.MERKLE_DISTRIBUTOR_ADDRESS=k,exports.MIXED_ROUTE_QUOTER_V1_ADDRESSES=K,exports.MULTICALL_ADDRESSES=w,exports.MaxUint256=Z,exports.NONFUNGIBLE_POSITION_MANAGER_ADDRESSES=Y,exports.NativeCurrency=fe,exports.Percent=ue,exports.Price=ce,exports.QUOTER_ADDRESSES=j,exports.SOCKS_CONTROLLER_ADDRESSES=Q,exports.SUPPORTED_CHAINS=m,exports.SWAP_ROUTER_02_ADDRESSES=function(e){return e==exports.ChainId.BNB?L[e].swapRouter02Address:"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"},exports.TICK_LENS_ADDRESSES=J,exports.TIMELOCK_ADDRESSES=H,exports.Token=Ce,exports.UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS="0x8B799381ac40b838BBA4131ffB26197C432AFe78",exports.UNI_ADDRESSES=O,exports.V2_FACTORY_ADDRESS="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",exports.V2_FACTORY_ADDRESSES=R,exports.V2_ROUTER_ADDRESS="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",exports.V2_ROUTER_ADDRESSES=S,exports.V3_CORE_FACTORY_ADDRESSES=P,exports.V3_MIGRATOR_ADDRESSES=U,exports.WETH9=he,exports.computePriceImpact=function(e,r,t){var n=e.quote(r),o=n.subtract(t).divide(n);return new ue(o.numerator,o.denominator)},exports.sortedInsert=function(e,r,t,o){if(t>0||n(!1),e.length<=t||n(!1),0===e.length)return e.push(r),null;var i=e.length===t;if(i&&o(e[e.length-1],r)<=0)return r;for(var a=0,d=e.length;a<d;){var s=a+d>>>1;o(e[s],r)<=0?a=s+1:d=s}return e.splice(a,0,r),i?e.pop():null},exports.sqrt=function(e){if(t.greaterThanOrEqual(e,me)||n(!1),t.lessThan(e,De))return t.BigInt(Math.floor(Math.sqrt(t.toNumber(e))));var r,o;for(r=e,o=t.add(t.divide(e,Ie),Fe);t.lessThan(o,r);)r=o,o=t.divide(t.add(t.divide(e,o),o),Ie);return r},exports.validateAndParseAddress=Ee;
+"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r,t=e(require("jsbi")),n=e(require("tiny-invariant")),s=e(require("decimal.js-light")),o=e(require("big.js")),d=e(require("toformat")),i=require("@ethersproject/bignumber"),a=require("@ethersproject/address");(r=exports.ChainId||(exports.ChainId={}))[r.MAINNET=1]="MAINNET",r[r.GOERLI=5]="GOERLI",r[r.SEPOLIA=11155111]="SEPOLIA",r[r.OPTIMISM=10]="OPTIMISM",r[r.OPTIMISM_GOERLI=420]="OPTIMISM_GOERLI",r[r.ARBITRUM_ONE=42161]="ARBITRUM_ONE",r[r.ARBITRUM_GOERLI=421613]="ARBITRUM_GOERLI",r[r.POLYGON=137]="POLYGON",r[r.POLYGON_MUMBAI=80001]="POLYGON_MUMBAI",r[r.CELO=42220]="CELO",r[r.CELO_ALFAJORES=44787]="CELO_ALFAJORES",r[r.GNOSIS=100]="GNOSIS",r[r.MOONBEAM=1284]="MOONBEAM",r[r.BNB=56]="BNB",r[r.UCHAIN=792]="UCHAIN",r[r.AVALANCHE=43114]="AVALANCHE",r[r.BASE_GOERLI=84531]="BASE_GOERLI",r[r.BASE=8453]="BASE";const c=[exports.ChainId.MAINNET,exports.ChainId.OPTIMISM,exports.ChainId.OPTIMISM_GOERLI,exports.ChainId.ARBITRUM_ONE,exports.ChainId.ARBITRUM_GOERLI,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA,exports.ChainId.CELO_ALFAJORES,exports.ChainId.CELO,exports.ChainId.BNB,exports.ChainId.UCHAIN,exports.ChainId.AVALANCHE,exports.ChainId.BASE,exports.ChainId.BASE_GOERLI];var A;(A=exports.NativeCurrencyName||(exports.NativeCurrencyName={})).ETHER="ETH",A.MATIC="MATIC",A.CELO="CELO",A.GNOSIS="XDAI",A.MOONBEAM="GLMR",A.BNB="BNB",A.UCHAIN="TBT",A.AVAX="AVAX";const u=[exports.ChainId.MAINNET,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA];function E(e,r){return void 0===r&&(r=[]),u.concat(r).reduce((r,t)=>(r[t]=e,r),{})}const C=E("0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",[exports.ChainId.OPTIMISM,exports.ChainId.ARBITRUM_ONE,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.SEPOLIA]),f=E("0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",[exports.ChainId.POLYGON,exports.ChainId.OPTIMISM,exports.ChainId.CELO,exports.ChainId.ARBITRUM_ONE,exports.ChainId.BNB,exports.ChainId.AVALANCHE,exports.ChainId.BASE]),x=E("0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"),p={v3CoreFactoryAddress:"0x1F98431c8aD98523631AE4a59f267346ea31F984",multicallAddress:"0x1F98415757620B543A52E61c46B32eB19261F984",quoterAddress:"0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6",v3MigratorAddress:"0xA5644E29708357803b5A882D272c41cC0dF92B34",nonfungiblePositionManagerAddress:"0xC36442b4a4522E871399CD717aBDD847Ab11FE88"},D={...p,v1MixedRouteQuoterAddress:"0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E"},h={...p,v1MixedRouteQuoterAddress:"0xBa60b6e6fF25488308789E6e0A65D838be34194e"},I=p,l={...p,multicallAddress:"0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB",tickLensAddress:"0xbfd8137f7d1516D3ea5cA83523914859ec47F573"},F={v3CoreFactoryAddress:"0xAfE208a311B21f13EF87E33A90049fC17A7acDEc",multicallAddress:"0x633987602DE5C4F337e3DbF265303A1080324204",quoterAddress:"0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8",v3MigratorAddress:"0x3cFd4d48EDfDCC53D3f173F596f621064614C582",nonfungiblePositionManagerAddress:"0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A",tickLensAddress:"0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D"},m={[exports.ChainId.MAINNET]:D,[exports.ChainId.OPTIMISM]:I,[exports.ChainId.ARBITRUM_ONE]:l,[exports.ChainId.POLYGON]:p,[exports.ChainId.POLYGON_MUMBAI]:p,[exports.ChainId.GOERLI]:h,[exports.ChainId.CELO]:F,[exports.ChainId.CELO_ALFAJORES]:F,[exports.ChainId.BNB]:{v3CoreFactoryAddress:"0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7",multicallAddress:"0x963Df249eD09c358A4819E39d9Cd5736c3087184",quoterAddress:"0x78D78E420Da98ad378D7799bE8f4AF69033EB077",v3MigratorAddress:"0x32681814957e0C13117ddc0c2aba232b5c9e760f",nonfungiblePositionManagerAddress:"0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613",tickLensAddress:"0xD9270014D396281579760619CCf4c3af0501A47C",swapRouter02Address:"0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2"},[exports.ChainId.UCHAIN]:{v3CoreFactoryAddress:"0xD7F71EE33DCb17AAb183b6173423fD7C95866F32",multicallAddress:"0x2621027bD033Ce003e34c6f4BaD927E366c0F5B5",quoterAddress:"0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8",v3MigratorAddress:"0x3cFd4d48EDfDCC53D3f173F596f621064614C582",nonfungiblePositionManagerAddress:"0xc8b8d86996aaB4fc79c1630e2D2C7e7e7E5C583F",tickLensAddress:"0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D"},[exports.ChainId.OPTIMISM_GOERLI]:{v3CoreFactoryAddress:"0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10",multicallAddress:"0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd",quoterAddress:"0x9569CbA925c8ca2248772A9A4976A516743A246F",v3MigratorAddress:"0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8",nonfungiblePositionManagerAddress:"0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6",tickLensAddress:"0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e"},[exports.ChainId.ARBITRUM_GOERLI]:{v3CoreFactoryAddress:"0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6",multicallAddress:"0x8260CB40247290317a4c062F3542622367F206Ee",quoterAddress:"0x1dd92b83591781D0C6d98d07391eea4b9a6008FA",v3MigratorAddress:"0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3",nonfungiblePositionManagerAddress:"0x622e4726a167799826d1E1D150b076A7725f5D81",tickLensAddress:"0xb52429333da969a0C79a60930a4Bf0020E5D1DE8"},[exports.ChainId.SEPOLIA]:{v3CoreFactoryAddress:"0x0227628f3F023bb0B980b67D528571c95c6DaC1c",multicallAddress:"0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07",quoterAddress:"0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3",v3MigratorAddress:"0x729004182cF005CEC8Bd85df140094b6aCbe8b15",nonfungiblePositionManagerAddress:"0x1238536071E1c677A632429e3655c799b22cDA52",tickLensAddress:"0xd7f33bcdb21b359c8ee6f0251d30e94832baad07"},[exports.ChainId.AVALANCHE]:{v3CoreFactoryAddress:"0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD",multicallAddress:"0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2",quoterAddress:"0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F",v3MigratorAddress:"0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97",nonfungiblePositionManagerAddress:"0x655C406EBFa14EE2006250925e54ec43AD184f8B",tickLensAddress:"0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950",swapRouter02Address:"0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE"},[exports.ChainId.BASE]:{v3CoreFactoryAddress:"0x33128a8fC17869897dcE68Ed026d694621f6FDfD",multicallAddress:"0x091e99cb1C49331a94dD62755D168E941AbD0693",quoterAddress:"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a",v3MigratorAddress:"0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7",nonfungiblePositionManagerAddress:"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1",tickLensAddress:"0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d",swapRouter02Address:"0x2626664c2603336E57B271c5C0b26F421741e481"},[exports.ChainId.BASE_GOERLI]:{v3CoreFactoryAddress:"0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2",multicallAddress:"0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439",quoterAddress:"0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9",v3MigratorAddress:"0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE",nonfungiblePositionManagerAddress:"0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30",tickLensAddress:"0x1acB873Ee909D0c98adB18e4474943249F931b92",swapRouter02Address:"0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d"}},B={...c.reduce((e,r)=>(e[r]=m[r].v3CoreFactoryAddress,e),{})},b={...c.reduce((e,r)=>{const t=m[r].v3MigratorAddress;return t&&(e[r]=t),e},{})},O={...c.reduce((e,r)=>(e[r]=m[r].multicallAddress,e),{})},R=E("0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F"),S={[exports.ChainId.MAINNET]:"0xC4e172459f1E7939D522503B81AFAaC1014CE6F6"},N={[exports.ChainId.MAINNET]:"0x408ED6354d4973f66138C91495F2f2FCbd8724C3"},_=E("0x1a9C8182C09F50C8318d769245beA52c32BE35BC"),g={[exports.ChainId.MAINNET]:"0x090D4613473dEE047c3f2706764f49E0821D256e"},T={[exports.ChainId.MAINNET]:"0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8"},M={...c.reduce((e,r)=>(e[r]=m[r].quoterAddress,e),{})},L={...c.reduce((e,r)=>{const t=m[r].nonfungiblePositionManagerAddress;return t&&(e[r]=t),e},{})},y={...E("0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e")},P={[exports.ChainId.MAINNET]:"0x65770b5283117639760beA3F867b69b3697a91dd"},v={...c.reduce((e,r)=>{const t=m[r].tickLensAddress;return t&&(e[r]=t),e},{})},U=c.reduce((e,r)=>{const t=m[r].v1MixedRouteQuoterAddress;return t&&(e[r]=t),e},{});var w,q;(w=exports.TradeType||(exports.TradeType={}))[w.EXACT_INPUT=0]="EXACT_INPUT",w[w.EXACT_OUTPUT=1]="EXACT_OUTPUT",(q=exports.Rounding||(exports.Rounding={}))[q.ROUND_DOWN=0]="ROUND_DOWN",q[q.ROUND_HALF_UP=1]="ROUND_HALF_UP",q[q.ROUND_UP=2]="ROUND_UP";const G=t.BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),W=d(s),H=d(o),V={[exports.Rounding.ROUND_DOWN]:W.ROUND_DOWN,[exports.Rounding.ROUND_HALF_UP]:W.ROUND_HALF_UP,[exports.Rounding.ROUND_UP]:W.ROUND_UP},k={[exports.Rounding.ROUND_DOWN]:0,[exports.Rounding.ROUND_HALF_UP]:1,[exports.Rounding.ROUND_UP]:3};class Y{constructor(e,r){void 0===r&&(r=t.BigInt(1)),this.numerator=t.BigInt(e),this.denominator=t.BigInt(r)}static tryParseFraction(e){if(e instanceof t||"number"==typeof e||"string"==typeof e)return new Y(e);if("numerator"in e&&"denominator"in e)return e;throw new Error("Could not parse fraction")}get quotient(){return t.divide(this.numerator,this.denominator)}get remainder(){return new Y(t.remainder(this.numerator,this.denominator),this.denominator)}invert(){return new Y(this.denominator,this.numerator)}add(e){const r=Y.tryParseFraction(e);return t.equal(this.denominator,r.denominator)?new Y(t.add(this.numerator,r.numerator),this.denominator):new Y(t.add(t.multiply(this.numerator,r.denominator),t.multiply(r.numerator,this.denominator)),t.multiply(this.denominator,r.denominator))}subtract(e){const r=Y.tryParseFraction(e);return t.equal(this.denominator,r.denominator)?new Y(t.subtract(this.numerator,r.numerator),this.denominator):new Y(t.subtract(t.multiply(this.numerator,r.denominator),t.multiply(r.numerator,this.denominator)),t.multiply(this.denominator,r.denominator))}lessThan(e){const r=Y.tryParseFraction(e);return t.lessThan(t.multiply(this.numerator,r.denominator),t.multiply(r.numerator,this.denominator))}equalTo(e){const r=Y.tryParseFraction(e);return t.equal(t.multiply(this.numerator,r.denominator),t.multiply(r.numerator,this.denominator))}greaterThan(e){const r=Y.tryParseFraction(e);return t.greaterThan(t.multiply(this.numerator,r.denominator),t.multiply(r.numerator,this.denominator))}multiply(e){const r=Y.tryParseFraction(e);return new Y(t.multiply(this.numerator,r.numerator),t.multiply(this.denominator,r.denominator))}divide(e){const r=Y.tryParseFraction(e);return new Y(t.multiply(this.numerator,r.denominator),t.multiply(this.denominator,r.numerator))}toSignificant(e,r,t){void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>0||n(!1),W.set({precision:e+1,rounding:V[t]});const s=new W(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(e);return s.toFormat(s.decimalPlaces(),r)}toFixed(e,r,t){return void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>=0||n(!1),H.DP=e,H.RM=k[t],new H(this.numerator.toString()).div(this.denominator.toString()).toFormat(e,r)}get asFraction(){return new Y(this.numerator,this.denominator)}}const X=d(o);class j extends Y{constructor(e,r,s){super(r,s),t.lessThanOrEqual(this.quotient,G)||n(!1),this.currency=e,this.decimalScale=t.exponentiate(t.BigInt(10),t.BigInt(e.decimals))}static fromRawAmount(e,r){return new j(e,r)}static fromFractionalAmount(e,r,t){return new j(e,r,t)}add(e){this.currency.equals(e.currency)||n(!1);const r=super.add(e);return j.fromFractionalAmount(this.currency,r.numerator,r.denominator)}subtract(e){this.currency.equals(e.currency)||n(!1);const r=super.subtract(e);return j.fromFractionalAmount(this.currency,r.numerator,r.denominator)}multiply(e){const r=super.multiply(e);return j.fromFractionalAmount(this.currency,r.numerator,r.denominator)}divide(e){const r=super.divide(e);return j.fromFractionalAmount(this.currency,r.numerator,r.denominator)}toSignificant(e,r,t){return void 0===e&&(e=6),void 0===t&&(t=exports.Rounding.ROUND_DOWN),super.divide(this.decimalScale).toSignificant(e,r,t)}toFixed(e,r,t){return void 0===e&&(e=this.currency.decimals),void 0===t&&(t=exports.Rounding.ROUND_DOWN),e<=this.currency.decimals||n(!1),super.divide(this.decimalScale).toFixed(e,r,t)}toExact(e){return void 0===e&&(e={groupSeparator:""}),X.DP=this.currency.decimals,new X(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(e)}get wrapped(){return this.currency.isToken?this:j.fromFractionalAmount(this.currency.wrapped,this.numerator,this.denominator)}}const Q=new Y(t.BigInt(100));function J(e){return new K(e.numerator,e.denominator)}class K extends Y{constructor(){super(...arguments),this.isPercent=!0}add(e){return J(super.add(e))}subtract(e){return J(super.subtract(e))}multiply(e){return J(super.multiply(e))}divide(e){return J(super.divide(e))}toSignificant(e,r,t){return void 0===e&&(e=5),super.multiply(Q).toSignificant(e,r,t)}toFixed(e,r,t){return void 0===e&&(e=2),super.multiply(Q).toFixed(e,r,t)}}class $ extends Y{constructor(){let e,r,n,s;for(var o=arguments.length,d=new Array(o),i=0;i<o;i++)d[i]=arguments[i];if(4===d.length)[e,r,n,s]=d;else{const t=d[0].quoteAmount.divide(d[0].baseAmount);[e,r,n,s]=[d[0].baseAmount.currency,d[0].quoteAmount.currency,t.denominator,t.numerator]}super(s,n),this.baseCurrency=e,this.quoteCurrency=r,this.scalar=new Y(t.exponentiate(t.BigInt(10),t.BigInt(e.decimals)),t.exponentiate(t.BigInt(10),t.BigInt(r.decimals)))}invert(){return new $(this.quoteCurrency,this.baseCurrency,this.numerator,this.denominator)}multiply(e){this.quoteCurrency.equals(e.baseCurrency)||n(!1);const r=super.multiply(e);return new $(this.baseCurrency,e.quoteCurrency,r.denominator,r.numerator)}quote(e){e.currency.equals(this.baseCurrency)||n(!1);const r=super.multiply(e);return j.fromFractionalAmount(this.quoteCurrency,r.numerator,r.denominator)}get adjustedForDecimals(){return super.multiply(this.scalar)}toSignificant(e,r,t){return void 0===e&&(e=6),this.adjustedForDecimals.toSignificant(e,r,t)}toFixed(e,r,t){return void 0===e&&(e=4),this.adjustedForDecimals.toFixed(e,r,t)}}class z{constructor(e,r,t,s){Number.isSafeInteger(e)||n(!1),r>=0&&r<255&&Number.isInteger(r)||n(!1),this.chainId=e,this.decimals=r,this.symbol=t,this.name=s}}class Z extends z{constructor(){super(...arguments),this.isNative=!0,this.isToken=!1}}function ee(e){try{return a.getAddress(e)}catch(r){throw new Error(e+" is not a valid address.")}}const re=/^0x[0-9a-fA-F]{40}$/;class te extends z{constructor(e,r,t,s,o,d,a,c){super(e,t,s,o),this.isNative=!1,this.isToken=!0,this.address=d?function(e){if(re.test(e))return e;throw new Error(e+" is not a valid address.")}(r):ee(r),a&&(a.gte(i.BigNumber.from(0))||n(!1)),c&&(c.gte(i.BigNumber.from(0))||n(!1)),this.buyFeeBps=a,this.sellFeeBps=c}equals(e){return e.isToken&&this.chainId===e.chainId&&this.address.toLowerCase()===e.address.toLowerCase()}sortsBefore(e){return this.chainId!==e.chainId&&n(!1),this.address.toLowerCase()===e.address.toLowerCase()&&n(!1),this.address.toLowerCase()<e.address.toLowerCase()}get wrapped(){return this}}const ne={1:new te(1,"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",18,"WETH","Wrapped Ether"),3:new te(3,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),4:new te(4,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),5:new te(5,"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",18,"WETH","Wrapped Ether"),42:new te(42,"0xd0A1E359811322d97991E03f863a0C30C2cF029C",18,"WETH","Wrapped Ether"),10:new te(10,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),69:new te(69,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),42161:new te(42161,"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",18,"WETH","Wrapped Ether"),421611:new te(421611,"0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681",18,"WETH","Wrapped Ether"),8453:new te(8453,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),56:new te(56,"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",18,"WBNB","Wrapped BNB"),792:new te(792,"0x1D7A42e67F9C5592d1927a7B47e32Ae809561fE0",18,"WTBT","Wrapped TBT"),137:new te(137,"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",18,"WMATIC","Wrapped MATIC"),43114:new te(43114,"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",18,"WAVAX","Wrapped AVAX")};class se extends Z{constructor(e){super(e,18,"ETH","Ether")}get wrapped(){const e=ne[this.chainId];return e||n(!1),e}static onChain(e){return this._etherCache[e]??(this._etherCache[e]=new se(e))}equals(e){return e.isNative&&e.chainId===this.chainId}}se._etherCache={};const oe=t.BigInt(Number.MAX_SAFE_INTEGER),de=t.BigInt(0),ie=t.BigInt(1),ae=t.BigInt(2);exports.ARGENT_WALLET_DETECTOR_ADDRESS=T,exports.CHAIN_TO_ADDRESSES_MAP=m,exports.CurrencyAmount=j,exports.ENS_REGISTRAR_ADDRESSES=y,exports.Ether=se,exports.Fraction=Y,exports.GOVERNANCE_ALPHA_V0_ADDRESSES=R,exports.GOVERNANCE_ALPHA_V1_ADDRESSES=S,exports.GOVERNANCE_BRAVO_ADDRESSES=N,exports.MERKLE_DISTRIBUTOR_ADDRESS=g,exports.MIXED_ROUTE_QUOTER_V1_ADDRESSES=U,exports.MULTICALL_ADDRESSES=O,exports.MaxUint256=G,exports.NONFUNGIBLE_POSITION_MANAGER_ADDRESSES=L,exports.NativeCurrency=Z,exports.Percent=K,exports.Price=$,exports.QUOTER_ADDRESSES=M,exports.SOCKS_CONTROLLER_ADDRESSES=P,exports.SUPPORTED_CHAINS=c,exports.SWAP_ROUTER_02_ADDRESSES=e=>e==exports.ChainId.BNB?m[e].swapRouter02Address:"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",exports.TICK_LENS_ADDRESSES=v,exports.TIMELOCK_ADDRESSES=_,exports.Token=te,exports.UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS="0x8B799381ac40b838BBA4131ffB26197C432AFe78",exports.UNI_ADDRESSES=C,exports.V2_FACTORY_ADDRESS="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",exports.V2_FACTORY_ADDRESSES=f,exports.V2_ROUTER_ADDRESS="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",exports.V2_ROUTER_ADDRESSES=x,exports.V3_CORE_FACTORY_ADDRESSES=B,exports.V3_MIGRATOR_ADDRESSES=b,exports.WETH9=ne,exports.computePriceImpact=function(e,r,t){const n=e.quote(r),s=n.subtract(t).divide(n);return new K(s.numerator,s.denominator)},exports.sortedInsert=function(e,r,t,s){if(t>0||n(!1),e.length<=t||n(!1),0===e.length)return e.push(r),null;{const n=e.length===t;if(n&&s(e[e.length-1],r)<=0)return r;let o=0,d=e.length;for(;o<d;){const t=o+d>>>1;s(e[t],r)<=0?o=t+1:d=t}return e.splice(o,0,r),n?e.pop():null}},exports.sqrt=function(e){if(t.greaterThanOrEqual(e,de)||n(!1),t.lessThan(e,oe))return t.BigInt(Math.floor(Math.sqrt(t.toNumber(e))));let r,s;for(r=e,s=t.add(t.divide(e,ae),ie);t.lessThan(s,r);)r=s,s=t.divide(t.add(t.divide(e,s),s),ae);return r},exports.validateAndParseAddress=ee;
 //# sourceMappingURL=sdk-core.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map
index 91bafc4..3c4f49e 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = constructSameAddressMap(V2_FACTORY_ADDRESS)\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = constructSameAddressMap(V2_ROUTER_ADDRESS)\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (chainId == ChainId.BNB) {\n    return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\n  }\n  return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","NativeCurrencyName","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","ARBITRUM_ONE","ARBITRUM_GOERLI","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","TradeType","Rounding","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","swapRouter02Address","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","this","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","_this","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","_Fraction","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  UCHAIN = 792,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.UCHAIN,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  UCHAIN = 'TBT',\n  AVAX = 'AVAX',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = constructSameAddressMap(V2_FACTORY_ADDRESS, [\n  ChainId.POLYGON,\n  ChainId.OPTIMISM,\n  ChainId.CELO,\n  ChainId.ARBITRUM_ONE,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n])\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = constructSameAddressMap(V2_ROUTER_ADDRESS)\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// celo v3 addresses\nconst UCHAIN_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xD7F71EE33DCb17AAb183b6173423fD7C95866F32',\n  multicallAddress: '0x2621027bD033Ce003e34c6f4BaD927E366c0F5B5',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0xc8b8d86996aaB4fc79c1630e2D2C7e7e7E5C583F',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.UCHAIN]: UCHAIN_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (chainId == ChainId.BNB) {\n    return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\n  }\n  return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [792]: new Token(792, '0x1D7A42e67F9C5592d1927a7B47e32Ae809561fE0', 18, 'WTBT', 'Wrapped TBT'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","ARBITRUM_ONE","ARBITRUM_GOERLI","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","UCHAIN","AVALANCHE","BASE","BASE_GOERLI","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","CELO_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","[object Object]","swapRouter02Address","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","constructor","numerator","denominator","this","fractionish","Error","quotient","divide","remainder","invert","add","other","otherParsed","tryParseFraction","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","asFraction","CurrencyAmount","currency","super","lessThanOrEqual","decimalScale","exponentiate","decimals","rawAmount","equals","added","fromFractionalAmount","subtracted","multiplied","divided","toExact","wrapped","isToken","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","1","3","4","5","42","10","69","42161","421611","8453","56","792","137","43114","Ether","weth9","_etherCache","isNative","MAX_SAFE_INTEGER","ZERO","ONE","TWO","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
index 40ff667..b6322b8 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
@@ -6,48 +6,7 @@ import toFormat from 'toformat';
 import { BigNumber } from '@ethersproject/bignumber';
 import { getAddress } from '@ethersproject/address';
 
-function _defineProperties(target, props) {
-  for (var i = 0; i < props.length; i++) {
-    var descriptor = props[i];
-    descriptor.enumerable = descriptor.enumerable || false;
-    descriptor.configurable = true;
-    if ("value" in descriptor) descriptor.writable = true;
-    Object.defineProperty(target, descriptor.key, descriptor);
-  }
-}
-
-function _createClass(Constructor, protoProps, staticProps) {
-  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
-  if (staticProps) _defineProperties(Constructor, staticProps);
-  return Constructor;
-}
-
-function _extends() {
-  _extends = Object.assign || function (target) {
-    for (var i = 1; i < arguments.length; i++) {
-      var source = arguments[i];
-
-      for (var key in source) {
-        if (Object.prototype.hasOwnProperty.call(source, key)) {
-          target[key] = source[key];
-        }
-      }
-    }
-
-    return target;
-  };
-
-  return _extends.apply(this, arguments);
-}
-
-function _inheritsLoose(subClass, superClass) {
-  subClass.prototype = Object.create(superClass.prototype);
-  subClass.prototype.constructor = subClass;
-  subClass.__proto__ = superClass;
-}
-
 var ChainId;
-
 (function (ChainId) {
   ChainId[ChainId["MAINNET"] = 1] = "MAINNET";
   ChainId[ChainId["GOERLI"] = 5] = "GOERLI";
@@ -63,14 +22,13 @@ var ChainId;
   ChainId[ChainId["GNOSIS"] = 100] = "GNOSIS";
   ChainId[ChainId["MOONBEAM"] = 1284] = "MOONBEAM";
   ChainId[ChainId["BNB"] = 56] = "BNB";
+  ChainId[ChainId["UCHAIN"] = 792] = "UCHAIN";
   ChainId[ChainId["AVALANCHE"] = 43114] = "AVALANCHE";
   ChainId[ChainId["BASE_GOERLI"] = 84531] = "BASE_GOERLI";
   ChainId[ChainId["BASE"] = 8453] = "BASE";
 })(ChainId || (ChainId = {}));
-
-var SUPPORTED_CHAINS = [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI];
+const SUPPORTED_CHAINS = [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.UCHAIN, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI];
 var NativeCurrencyName;
-
 (function (NativeCurrencyName) {
   // Strings match input for CLI
   NativeCurrencyName["ETHER"] = "ETH";
@@ -79,65 +37,60 @@ var NativeCurrencyName;
   NativeCurrencyName["GNOSIS"] = "XDAI";
   NativeCurrencyName["MOONBEAM"] = "GLMR";
   NativeCurrencyName["BNB"] = "BNB";
+  NativeCurrencyName["UCHAIN"] = "TBT";
   NativeCurrencyName["AVAX"] = "AVAX";
 })(NativeCurrencyName || (NativeCurrencyName = {}));
 
-var _CHAIN_TO_ADDRESSES_M, _GOVERNANCE_ALPHA_V1_, _GOVERNANCE_BRAVO_ADD, _MERKLE_DISTRIBUTOR_A, _ARGENT_WALLET_DETECT, _SOCKS_CONTROLLER_ADD;
-var DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI];
-
+const DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA];
 function constructSameAddressMap(address, additionalNetworks) {
   if (additionalNetworks === void 0) {
     additionalNetworks = [];
   }
-
-  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce(function (memo, chainId) {
+  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce((memo, chainId) => {
     memo[chainId] = address;
     return memo;
   }, {});
 }
-
-var UNI_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [ChainId.OPTIMISM, ChainId.ARBITRUM_ONE, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.SEPOLIA]);
-var UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78';
-var V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
-var V2_FACTORY_ADDRESSES = /*#__PURE__*/constructSameAddressMap(V2_FACTORY_ADDRESS);
-var V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
-var V2_ROUTER_ADDRESSES = /*#__PURE__*/constructSameAddressMap(V2_ROUTER_ADDRESS); // Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon
-
-var DEFAULT_ADDRESSES = {
+const UNI_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [ChainId.OPTIMISM, ChainId.ARBITRUM_ONE, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.SEPOLIA]);
+const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78';
+const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
+const V2_FACTORY_ADDRESSES = /*#__PURE__*/constructSameAddressMap(V2_FACTORY_ADDRESS, [ChainId.POLYGON, ChainId.OPTIMISM, ChainId.CELO, ChainId.ARBITRUM_ONE, ChainId.BNB, ChainId.AVALANCHE, ChainId.BASE]);
+const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
+const V2_ROUTER_ADDRESSES = /*#__PURE__*/constructSameAddressMap(V2_ROUTER_ADDRESS);
+// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon
+const DEFAULT_ADDRESSES = {
   v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
   multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',
   quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',
   v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',
   nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'
 };
-
-var MAINNET_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+const MAINNET_ADDRESSES = {
+  ...DEFAULT_ADDRESSES,
   v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'
-});
-
-var GOERLI_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+};
+const GOERLI_ADDRESSES = {
+  ...DEFAULT_ADDRESSES,
   v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'
-});
-
-var OPTIMISM_ADDRESSES = DEFAULT_ADDRESSES;
-
-var ARBITRUM_ONE_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+};
+const OPTIMISM_ADDRESSES = DEFAULT_ADDRESSES;
+const ARBITRUM_ONE_ADDRESSES = {
+  ...DEFAULT_ADDRESSES,
   multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',
   tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'
-});
-
-var POLYGON_ADDRESSES = DEFAULT_ADDRESSES; // celo v3 addresses
-
-var CELO_ADDRESSES = {
+};
+const POLYGON_ADDRESSES = DEFAULT_ADDRESSES;
+// celo v3 addresses
+const CELO_ADDRESSES = {
   v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',
   multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',
   quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',
   v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',
   nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',
   tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'
-}; // BNB v3 addresses
-
-var BNB_ADDRESSES = {
+};
+// BNB v3 addresses
+const BNB_ADDRESSES = {
   v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',
   multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',
   quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',
@@ -145,36 +98,45 @@ var BNB_ADDRESSES = {
   nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',
   tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',
   swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'
-}; // optimism goerli addresses
-
-var OPTIMISM_GOERLI_ADDRESSES = {
+};
+// celo v3 addresses
+const UCHAIN_ADDRESSES = {
+  v3CoreFactoryAddress: '0xD7F71EE33DCb17AAb183b6173423fD7C95866F32',
+  multicallAddress: '0x2621027bD033Ce003e34c6f4BaD927E366c0F5B5',
+  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',
+  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',
+  nonfungiblePositionManagerAddress: '0xc8b8d86996aaB4fc79c1630e2D2C7e7e7E5C583F',
+  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'
+};
+// optimism goerli addresses
+const OPTIMISM_GOERLI_ADDRESSES = {
   v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',
   multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',
   quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',
   v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',
   nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',
   tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'
-}; // arbitrum goerli v3 addresses
-
-var ARBITRUM_GOERLI_ADDRESSES = {
+};
+// arbitrum goerli v3 addresses
+const ARBITRUM_GOERLI_ADDRESSES = {
   v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',
   multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',
   quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',
   v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',
   nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',
   tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'
-}; // sepolia v3 addresses
-
-var SEPOLIA_ADDRESSES = {
+};
+// sepolia v3 addresses
+const SEPOLIA_ADDRESSES = {
   v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',
   multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',
   quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',
   v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',
   nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',
   tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07'
-}; // Avalanche v3 addresses
-
-var AVALANCHE_ADDRESSES = {
+};
+// Avalanche v3 addresses
+const AVALANCHE_ADDRESSES = {
   v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',
   multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',
   quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',
@@ -183,7 +145,7 @@ var AVALANCHE_ADDRESSES = {
   tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',
   swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'
 };
-var BASE_ADDRESSES = {
+const BASE_ADDRESSES = {
   v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',
   multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',
   quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',
@@ -191,9 +153,9 @@ var BASE_ADDRESSES = {
   nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',
   tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',
   swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'
-}; // Base Goerli v3 addresses
-
-var BASE_GOERLI_ADDRESSES = {
+};
+// Base Goerli v3 addresses
+const BASE_GOERLI_ADDRESSES = {
   v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',
   multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',
   quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',
@@ -202,209 +164,226 @@ var BASE_GOERLI_ADDRESSES = {
   tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',
   swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'
 };
-var CHAIN_TO_ADDRESSES_MAP = (_CHAIN_TO_ADDRESSES_M = {}, _CHAIN_TO_ADDRESSES_M[ChainId.MAINNET] = MAINNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM] = OPTIMISM_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_ONE] = ARBITRUM_ONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON_MUMBAI] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.GOERLI] = GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO_ALFAJORES] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BNB] = BNB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM_GOERLI] = OPTIMISM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_GOERLI] = ARBITRUM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.SEPOLIA] = SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.AVALANCHE] = AVALANCHE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE] = BASE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE_GOERLI] = BASE_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M);
+const CHAIN_TO_ADDRESSES_MAP = {
+  [ChainId.MAINNET]: MAINNET_ADDRESSES,
+  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,
+  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,
+  [ChainId.POLYGON]: POLYGON_ADDRESSES,
+  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,
+  [ChainId.GOERLI]: GOERLI_ADDRESSES,
+  [ChainId.CELO]: CELO_ADDRESSES,
+  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,
+  [ChainId.BNB]: BNB_ADDRESSES,
+  [ChainId.UCHAIN]: UCHAIN_ADDRESSES,
+  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,
+  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,
+  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,
+  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,
+  [ChainId.BASE]: BASE_ADDRESSES,
+  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES
+};
 /* V3 Contract Addresses */
-
-var V3_CORE_FACTORY_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress;
-  return memo;
-}, {}));
-var V3_MIGRATOR_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  var v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress;
-
-  if (v3MigratorAddress) {
-    memo[chainId] = v3MigratorAddress;
-  }
-
-  return memo;
-}, {}));
-var MULTICALL_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress;
-  return memo;
-}, {}));
+const V3_CORE_FACTORY_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress;
+    return memo;
+  }, {})
+};
+const V3_MIGRATOR_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress;
+    if (v3MigratorAddress) {
+      memo[chainId] = v3MigratorAddress;
+    }
+    return memo;
+  }, {})
+};
+const MULTICALL_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress;
+    return memo;
+  }, {})
+};
 /**
  * The oldest V0 governance address
  */
-
-var GOVERNANCE_ALPHA_V0_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F');
+const GOVERNANCE_ALPHA_V0_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F');
 /**
  * The older V1 governance address
  */
-
-var GOVERNANCE_ALPHA_V1_ADDRESSES = (_GOVERNANCE_ALPHA_V1_ = {}, _GOVERNANCE_ALPHA_V1_[ChainId.MAINNET] = '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6', _GOVERNANCE_ALPHA_V1_);
+const GOVERNANCE_ALPHA_V1_ADDRESSES = {
+  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'
+};
 /**
  * The latest governor bravo that is currently admin of timelock
  */
-
-var GOVERNANCE_BRAVO_ADDRESSES = (_GOVERNANCE_BRAVO_ADD = {}, _GOVERNANCE_BRAVO_ADD[ChainId.MAINNET] = '0x408ED6354d4973f66138C91495F2f2FCbd8724C3', _GOVERNANCE_BRAVO_ADD);
-var TIMELOCK_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC');
-var MERKLE_DISTRIBUTOR_ADDRESS = (_MERKLE_DISTRIBUTOR_A = {}, _MERKLE_DISTRIBUTOR_A[ChainId.MAINNET] = '0x090D4613473dEE047c3f2706764f49E0821D256e', _MERKLE_DISTRIBUTOR_A);
-var ARGENT_WALLET_DETECTOR_ADDRESS = (_ARGENT_WALLET_DETECT = {}, _ARGENT_WALLET_DETECT[ChainId.MAINNET] = '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8', _ARGENT_WALLET_DETECT);
-var QUOTER_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress;
-  return memo;
-}, {}));
-var NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  var nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress;
-
-  if (nonfungiblePositionManagerAddress) {
-    memo[chainId] = nonfungiblePositionManagerAddress;
-  }
-
-  return memo;
-}, {}));
-var ENS_REGISTRAR_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'));
-var SOCKS_CONTROLLER_ADDRESSES = (_SOCKS_CONTROLLER_ADD = {}, _SOCKS_CONTROLLER_ADD[ChainId.MAINNET] = '0x65770b5283117639760beA3F867b69b3697a91dd', _SOCKS_CONTROLLER_ADD);
-var TICK_LENS_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  var tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress;
-
-  if (tickLensAddress) {
-    memo[chainId] = tickLensAddress;
-  }
-
-  return memo;
-}, {}));
-var MIXED_ROUTE_QUOTER_V1_ADDRESSES = /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
-  var v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress;
-
+const GOVERNANCE_BRAVO_ADDRESSES = {
+  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'
+};
+const TIMELOCK_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC');
+const MERKLE_DISTRIBUTOR_ADDRESS = {
+  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'
+};
+const ARGENT_WALLET_DETECTOR_ADDRESS = {
+  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'
+};
+const QUOTER_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress;
+    return memo;
+  }, {})
+};
+const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress;
+    if (nonfungiblePositionManagerAddress) {
+      memo[chainId] = nonfungiblePositionManagerAddress;
+    }
+    return memo;
+  }, {})
+};
+const ENS_REGISTRAR_ADDRESSES = {
+  ... /*#__PURE__*/constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')
+};
+const SOCKS_CONTROLLER_ADDRESSES = {
+  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'
+};
+const TICK_LENS_ADDRESSES = {
+  ... /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress;
+    if (tickLensAddress) {
+      memo[chainId] = tickLensAddress;
+    }
+    return memo;
+  }, {})
+};
+const MIXED_ROUTE_QUOTER_V1_ADDRESSES = /*#__PURE__*/SUPPORTED_CHAINS.reduce((memo, chainId) => {
+  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress;
   if (v1MixedRouteQuoterAddress) {
     memo[chainId] = v1MixedRouteQuoterAddress;
   }
-
   return memo;
 }, {});
-var SWAP_ROUTER_02_ADDRESSES = function SWAP_ROUTER_02_ADDRESSES(chainId) {
+const SWAP_ROUTER_02_ADDRESSES = chainId => {
   if (chainId == ChainId.BNB) {
     return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address;
   }
-
   return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45';
 };
 
 var TradeType;
-
 (function (TradeType) {
   TradeType[TradeType["EXACT_INPUT"] = 0] = "EXACT_INPUT";
   TradeType[TradeType["EXACT_OUTPUT"] = 1] = "EXACT_OUTPUT";
 })(TradeType || (TradeType = {}));
-
 var Rounding;
-
 (function (Rounding) {
   Rounding[Rounding["ROUND_DOWN"] = 0] = "ROUND_DOWN";
   Rounding[Rounding["ROUND_HALF_UP"] = 1] = "ROUND_HALF_UP";
   Rounding[Rounding["ROUND_UP"] = 2] = "ROUND_UP";
 })(Rounding || (Rounding = {}));
+const MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
+
+const Decimal = /*#__PURE__*/toFormat(_Decimal);
+const Big = /*#__PURE__*/toFormat(_Big);
+const toSignificantRounding = {
+  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,
+  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,
+  [Rounding.ROUND_UP]: Decimal.ROUND_UP
+};
+const toFixedRounding = {
+  [Rounding.ROUND_DOWN]: 0 /* RoundDown */,
+  [Rounding.ROUND_HALF_UP]: 1 /* RoundHalfUp */,
+  [Rounding.ROUND_UP]: 3 /* RoundUp */
+};
 
-var MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
-
-var _toSignificantRoundin, _toFixedRounding;
-var Decimal = /*#__PURE__*/toFormat(_Decimal);
-var Big = /*#__PURE__*/toFormat(_Big);
-var toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);
-var toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);
-var Fraction = /*#__PURE__*/function () {
-  function Fraction(numerator, denominator) {
+class Fraction {
+  constructor(numerator, denominator) {
     if (denominator === void 0) {
       denominator = JSBI.BigInt(1);
     }
-
     this.numerator = JSBI.BigInt(numerator);
     this.denominator = JSBI.BigInt(denominator);
   }
-
-  Fraction.tryParseFraction = function tryParseFraction(fractionish) {
+  static tryParseFraction(fractionish) {
     if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string') return new Fraction(fractionish);
     if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;
     throw new Error('Could not parse fraction');
-  } // performs floor division
-  ;
-
-  var _proto = Fraction.prototype;
-
-  _proto.invert = function invert() {
+  }
+  // performs floor division
+  get quotient() {
+    return JSBI.divide(this.numerator, this.denominator);
+  }
+  // remainder after floor division
+  get remainder() {
+    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);
+  }
+  invert() {
     return new Fraction(this.denominator, this.numerator);
-  };
-
-  _proto.add = function add(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
-
+  }
+  add(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     if (JSBI.equal(this.denominator, otherParsed.denominator)) {
       return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);
     }
-
     return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));
-  };
-
-  _proto.subtract = function subtract(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
-
+  }
+  subtract(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     if (JSBI.equal(this.denominator, otherParsed.denominator)) {
       return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);
     }
-
     return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));
-  };
-
-  _proto.lessThan = function lessThan(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  lessThan(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
-  };
-
-  _proto.equalTo = function equalTo(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  equalTo(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
-  };
-
-  _proto.greaterThan = function greaterThan(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  greaterThan(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
-  };
-
-  _proto.multiply = function multiply(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  multiply(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));
-  };
-
-  _proto.divide = function divide(other) {
-    var otherParsed = Fraction.tryParseFraction(other);
+  }
+  divide(other) {
+    const otherParsed = Fraction.tryParseFraction(other);
     return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));
-  };
-
-  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+  }
+  toSignificant(significantDigits, format, rounding) {
     if (format === void 0) {
       format = {
         groupSeparator: ''
       };
     }
-
     if (rounding === void 0) {
       rounding = Rounding.ROUND_HALF_UP;
     }
-
-    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== "production" ? invariant(false, significantDigits + " is not an integer.") : invariant(false) : void 0;
-    !(significantDigits > 0) ? process.env.NODE_ENV !== "production" ? invariant(false, significantDigits + " is not positive.") : invariant(false) : void 0;
+    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== "production" ? invariant(false, `${significantDigits} is not an integer.`) : invariant(false) : void 0;
+    !(significantDigits > 0) ? process.env.NODE_ENV !== "production" ? invariant(false, `${significantDigits} is not positive.`) : invariant(false) : void 0;
     Decimal.set({
       precision: significantDigits + 1,
       rounding: toSignificantRounding[rounding]
     });
-    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);
+    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);
     return quotient.toFormat(quotient.decimalPlaces(), format);
-  };
-
-  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+  }
+  toFixed(decimalPlaces, format, rounding) {
     if (format === void 0) {
       format = {
         groupSeparator: ''
       };
     }
-
     if (rounding === void 0) {
       rounding = Rounding.ROUND_HALF_UP;
     }
-
-    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== "production" ? invariant(false, decimalPlaces + " is not an integer.") : invariant(false) : void 0;
-    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== "production" ? invariant(false, decimalPlaces + " is negative.") : invariant(false) : void 0;
+    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== "production" ? invariant(false, `${decimalPlaces} is not an integer.`) : invariant(false) : void 0;
+    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== "production" ? invariant(false, `${decimalPlaces} is negative.`) : invariant(false) : void 0;
     Big.DP = decimalPlaces;
     Big.RM = toFixedRounding[rounding];
     return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);
@@ -412,50 +391,25 @@ var Fraction = /*#__PURE__*/function () {
   /**
    * Helper method for converting any super class back to a fraction
    */
-  ;
-
-  _createClass(Fraction, [{
-    key: "quotient",
-    get: function get() {
-      return JSBI.divide(this.numerator, this.denominator);
-    } // remainder after floor division
-
-  }, {
-    key: "remainder",
-    get: function get() {
-      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);
-    }
-  }, {
-    key: "asFraction",
-    get: function get() {
-      return new Fraction(this.numerator, this.denominator);
-    }
-  }]);
-
-  return Fraction;
-}();
-
-var Big$1 = /*#__PURE__*/toFormat(_Big);
-var CurrencyAmount = /*#__PURE__*/function (_Fraction) {
-  _inheritsLoose(CurrencyAmount, _Fraction);
-
-  function CurrencyAmount(currency, numerator, denominator) {
-    var _this;
+  get asFraction() {
+    return new Fraction(this.numerator, this.denominator);
+  }
+}
 
-    _this = _Fraction.call(this, numerator, denominator) || this;
-    !JSBI.lessThanOrEqual(_this.quotient, MaxUint256) ? process.env.NODE_ENV !== "production" ? invariant(false, 'AMOUNT') : invariant(false) : void 0;
-    _this.currency = currency;
-    _this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));
-    return _this;
+const Big$1 = /*#__PURE__*/toFormat(_Big);
+class CurrencyAmount extends Fraction {
+  constructor(currency, numerator, denominator) {
+    super(numerator, denominator);
+    !JSBI.lessThanOrEqual(this.quotient, MaxUint256) ? process.env.NODE_ENV !== "production" ? invariant(false, 'AMOUNT') : invariant(false) : void 0;
+    this.currency = currency;
+    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));
   }
   /**
    * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount
    * @param currency the currency in the amount
    * @param rawAmount the raw token or ether amount
    */
-
-
-  CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {
+  static fromRawAmount(currency, rawAmount) {
     return new CurrencyAmount(currency, rawAmount);
   }
   /**
@@ -464,329 +418,229 @@ var CurrencyAmount = /*#__PURE__*/function (_Fraction) {
    * @param numerator the numerator of the fractional token amount
    * @param denominator the denominator of the fractional token amount
    */
-  ;
-
-  CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {
+  static fromFractionalAmount(currency, numerator, denominator) {
     return new CurrencyAmount(currency, numerator, denominator);
-  };
-
-  var _proto = CurrencyAmount.prototype;
-
-  _proto.add = function add(other) {
+  }
+  add(other) {
     !this.currency.equals(other.currency) ? process.env.NODE_ENV !== "production" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;
-
-    var added = _Fraction.prototype.add.call(this, other);
-
+    const added = super.add(other);
     return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);
-  };
-
-  _proto.subtract = function subtract(other) {
+  }
+  subtract(other) {
     !this.currency.equals(other.currency) ? process.env.NODE_ENV !== "production" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;
-
-    var subtracted = _Fraction.prototype.subtract.call(this, other);
-
+    const subtracted = super.subtract(other);
     return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);
-  };
-
-  _proto.multiply = function multiply(other) {
-    var multiplied = _Fraction.prototype.multiply.call(this, other);
-
+  }
+  multiply(other) {
+    const multiplied = super.multiply(other);
     return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);
-  };
-
-  _proto.divide = function divide(other) {
-    var divided = _Fraction.prototype.divide.call(this, other);
-
+  }
+  divide(other) {
+    const divided = super.divide(other);
     return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);
-  };
-
-  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+  }
+  toSignificant(significantDigits, format, rounding) {
     if (significantDigits === void 0) {
       significantDigits = 6;
     }
-
     if (rounding === void 0) {
       rounding = Rounding.ROUND_DOWN;
     }
-
-    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);
-  };
-
-  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding);
+  }
+  toFixed(decimalPlaces, format, rounding) {
     if (decimalPlaces === void 0) {
       decimalPlaces = this.currency.decimals;
     }
-
     if (rounding === void 0) {
       rounding = Rounding.ROUND_DOWN;
     }
-
     !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== "production" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;
-    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);
-  };
-
-  _proto.toExact = function toExact(format) {
+    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding);
+  }
+  toExact(format) {
     if (format === void 0) {
       format = {
         groupSeparator: ''
       };
     }
-
     Big$1.DP = this.currency.decimals;
     return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);
-  };
-
-  _createClass(CurrencyAmount, [{
-    key: "wrapped",
-    get: function get() {
-      if (this.currency.isToken) return this;
-      return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);
-    }
-  }]);
-
-  return CurrencyAmount;
-}(Fraction);
+  }
+  get wrapped() {
+    if (this.currency.isToken) return this;
+    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);
+  }
+}
 
-var ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));
+const ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));
 /**
  * Converts a fraction to a percent
  * @param fraction the fraction to convert
  */
-
 function toPercent(fraction) {
   return new Percent(fraction.numerator, fraction.denominator);
 }
-
-var Percent = /*#__PURE__*/function (_Fraction) {
-  _inheritsLoose(Percent, _Fraction);
-
-  function Percent() {
-    var _this;
-
-    _this = _Fraction.apply(this, arguments) || this;
+class Percent extends Fraction {
+  constructor() {
+    super(...arguments);
     /**
      * This boolean prevents a fraction from being interpreted as a Percent
      */
-
-    _this.isPercent = true;
-    return _this;
+    this.isPercent = true;
   }
-
-  var _proto = Percent.prototype;
-
-  _proto.add = function add(other) {
-    return toPercent(_Fraction.prototype.add.call(this, other));
-  };
-
-  _proto.subtract = function subtract(other) {
-    return toPercent(_Fraction.prototype.subtract.call(this, other));
-  };
-
-  _proto.multiply = function multiply(other) {
-    return toPercent(_Fraction.prototype.multiply.call(this, other));
-  };
-
-  _proto.divide = function divide(other) {
-    return toPercent(_Fraction.prototype.divide.call(this, other));
-  };
-
-  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+  add(other) {
+    return toPercent(super.add(other));
+  }
+  subtract(other) {
+    return toPercent(super.subtract(other));
+  }
+  multiply(other) {
+    return toPercent(super.multiply(other));
+  }
+  divide(other) {
+    return toPercent(super.divide(other));
+  }
+  toSignificant(significantDigits, format, rounding) {
     if (significantDigits === void 0) {
       significantDigits = 5;
     }
-
-    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);
-  };
-
-  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);
+  }
+  toFixed(decimalPlaces, format, rounding) {
     if (decimalPlaces === void 0) {
       decimalPlaces = 2;
     }
+    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);
+  }
+}
 
-    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);
-  };
-
-  return Percent;
-}(Fraction);
-
-var Price = /*#__PURE__*/function (_Fraction) {
-  _inheritsLoose(Price, _Fraction);
-
+class Price extends Fraction {
   /**
    * Construct a price, either with the base and quote currency amount, or the
    * @param args
    */
-  function Price() {
-    var _this;
-
-    var baseCurrency, quoteCurrency, denominator, numerator;
-
+  constructor() {
+    let baseCurrency, quoteCurrency, denominator, numerator;
     for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
       args[_key] = arguments[_key];
     }
-
     if (args.length === 4) {
-      baseCurrency = args[0];
-      quoteCurrency = args[1];
-      denominator = args[2];
-      numerator = args[3];
+      [baseCurrency, quoteCurrency, denominator, numerator] = args;
     } else {
-      var result = args[0].quoteAmount.divide(args[0].baseAmount);
-      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];
-      baseCurrency = _ref[0];
-      quoteCurrency = _ref[1];
-      denominator = _ref[2];
-      numerator = _ref[3];
+      const result = args[0].quoteAmount.divide(args[0].baseAmount);
+      [baseCurrency, quoteCurrency, denominator, numerator] = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];
     }
-
-    _this = _Fraction.call(this, numerator, denominator) || this;
-    _this.baseCurrency = baseCurrency;
-    _this.quoteCurrency = quoteCurrency;
-    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));
-    return _this;
+    super(numerator, denominator);
+    this.baseCurrency = baseCurrency;
+    this.quoteCurrency = quoteCurrency;
+    this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));
   }
   /**
    * Flip the price, switching the base and quote currency
    */
-
-
-  var _proto = Price.prototype;
-
-  _proto.invert = function invert() {
+  invert() {
     return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);
   }
   /**
    * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency
    * @param other the other price
    */
-  ;
-
-  _proto.multiply = function multiply(other) {
+  multiply(other) {
     !this.quoteCurrency.equals(other.baseCurrency) ? process.env.NODE_ENV !== "production" ? invariant(false, 'TOKEN') : invariant(false) : void 0;
-
-    var fraction = _Fraction.prototype.multiply.call(this, other);
-
+    const fraction = super.multiply(other);
     return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);
   }
   /**
    * Return the amount of quote currency corresponding to a given amount of the base currency
    * @param currencyAmount the amount of base currency to quote against the price
    */
-  ;
-
-  _proto.quote = function quote(currencyAmount) {
+  quote(currencyAmount) {
     !currencyAmount.currency.equals(this.baseCurrency) ? process.env.NODE_ENV !== "production" ? invariant(false, 'TOKEN') : invariant(false) : void 0;
-
-    var result = _Fraction.prototype.multiply.call(this, currencyAmount);
-
+    const result = super.multiply(currencyAmount);
     return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);
   }
   /**
    * Get the value scaled by decimals for formatting
    * @private
    */
-  ;
-
-  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+  get adjustedForDecimals() {
+    return super.multiply(this.scalar);
+  }
+  toSignificant(significantDigits, format, rounding) {
     if (significantDigits === void 0) {
       significantDigits = 6;
     }
-
     return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);
-  };
-
-  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+  }
+  toFixed(decimalPlaces, format, rounding) {
     if (decimalPlaces === void 0) {
       decimalPlaces = 4;
     }
-
     return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);
-  };
-
-  _createClass(Price, [{
-    key: "adjustedForDecimals",
-    get: function get() {
-      return _Fraction.prototype.multiply.call(this, this.scalar);
-    }
-  }]);
-
-  return Price;
-}(Fraction);
+  }
+}
 
 /**
  * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies
  */
-
-var BaseCurrency =
-/**
- * Constructs an instance of the base class `BaseCurrency`.
- * @param chainId the chain ID on which this currency resides
- * @param decimals decimals of the currency
- * @param symbol symbol of the currency
- * @param name of the currency
- */
-function BaseCurrency(chainId, decimals, symbol, name) {
-  !Number.isSafeInteger(chainId) ? process.env.NODE_ENV !== "production" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;
-  !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ? process.env.NODE_ENV !== "production" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;
-  this.chainId = chainId;
-  this.decimals = decimals;
-  this.symbol = symbol;
-  this.name = name;
-};
+class BaseCurrency {
+  /**
+   * Constructs an instance of the base class `BaseCurrency`.
+   * @param chainId the chain ID on which this currency resides
+   * @param decimals decimals of the currency
+   * @param symbol symbol of the currency
+   * @param name of the currency
+   */
+  constructor(chainId, decimals, symbol, name) {
+    !Number.isSafeInteger(chainId) ? process.env.NODE_ENV !== "production" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;
+    !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ? process.env.NODE_ENV !== "production" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;
+    this.chainId = chainId;
+    this.decimals = decimals;
+    this.symbol = symbol;
+    this.name = name;
+  }
+}
 
 /**
  * Represents the native currency of the chain on which it resides, e.g.
  */
-
-var NativeCurrency = /*#__PURE__*/function (_BaseCurrency) {
-  _inheritsLoose(NativeCurrency, _BaseCurrency);
-
-  function NativeCurrency() {
-    var _this;
-
-    _this = _BaseCurrency.apply(this, arguments) || this;
-    _this.isNative = true;
-    _this.isToken = false;
-    return _this;
+class NativeCurrency extends BaseCurrency {
+  constructor() {
+    super(...arguments);
+    this.isNative = true;
+    this.isToken = false;
   }
-
-  return NativeCurrency;
-}(BaseCurrency);
+}
 
 /**
  * Validates an address and returns the parsed (checksummed) version of that address
  * @param address the unchecksummed hex address
  */
-
 function validateAndParseAddress(address) {
   try {
     return getAddress(address);
   } catch (error) {
-    throw new Error(address + " is not a valid address.");
+    throw new Error(`${address} is not a valid address.`);
   }
-} // Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x
-
-var startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;
+}
+// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x
+const startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;
 /**
  * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.
  * @param address the unchecksummed hex address
  */
-
 function checkValidAddress(address) {
   if (startsWith0xLen42HexRegex.test(address)) {
     return address;
   }
-
-  throw new Error(address + " is not a valid address.");
+  throw new Error(`${address} is not a valid address.`);
 }
 
 /**
  * Represents an ERC20 token with a unique address and some metadata.
  */
-
-var Token = /*#__PURE__*/function (_BaseCurrency) {
-  _inheritsLoose(Token, _BaseCurrency);
-
+class Token extends BaseCurrency {
   /**
    *
    * @param chainId {@link BaseCurrency#chainId}
@@ -798,40 +652,29 @@ var Token = /*#__PURE__*/function (_BaseCurrency) {
    * @param buyFeeBps Buy fee tax for FOT tokens, in basis points
    * @param sellFeeBps Sell fee tax for FOT tokens, in basis points
    */
-  function Token(chainId, address, decimals, symbol, name, bypassChecksum, buyFeeBps, sellFeeBps) {
-    var _this;
-
-    _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;
-    _this.isNative = false;
-    _this.isToken = true;
-
+  constructor(chainId, address, decimals, symbol, name, bypassChecksum, buyFeeBps, sellFeeBps) {
+    super(chainId, decimals, symbol, name);
+    this.isNative = false;
+    this.isToken = true;
     if (bypassChecksum) {
-      _this.address = checkValidAddress(address);
+      this.address = checkValidAddress(address);
     } else {
-      _this.address = validateAndParseAddress(address);
+      this.address = validateAndParseAddress(address);
     }
-
     if (buyFeeBps) {
       !buyFeeBps.gte(BigNumber.from(0)) ? process.env.NODE_ENV !== "production" ? invariant(false, 'NON-NEGATIVE FOT FEES') : invariant(false) : void 0;
     }
-
     if (sellFeeBps) {
       !sellFeeBps.gte(BigNumber.from(0)) ? process.env.NODE_ENV !== "production" ? invariant(false, 'NON-NEGATIVE FOT FEES') : invariant(false) : void 0;
     }
-
-    _this.buyFeeBps = buyFeeBps;
-    _this.sellFeeBps = sellFeeBps;
-    return _this;
+    this.buyFeeBps = buyFeeBps;
+    this.sellFeeBps = sellFeeBps;
   }
   /**
    * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
    * @param other other token to compare
    */
-
-
-  var _proto = Token.prototype;
-
-  _proto.equals = function equals(other) {
+  equals(other) {
     return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase();
   }
   /**
@@ -840,9 +683,7 @@ var Token = /*#__PURE__*/function (_BaseCurrency) {
    * @throws if the tokens have the same address
    * @throws if the tokens are on different chains
    */
-  ;
-
-  _proto.sortsBefore = function sortsBefore(other) {
+  sortsBefore(other) {
     !(this.chainId === other.chainId) ? process.env.NODE_ENV !== "production" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;
     !(this.address.toLowerCase() !== other.address.toLowerCase()) ? process.env.NODE_ENV !== "production" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;
     return this.address.toLowerCase() < other.address.toLowerCase();
@@ -850,59 +691,50 @@ var Token = /*#__PURE__*/function (_BaseCurrency) {
   /**
    * Return this token, which does not need to be wrapped
    */
-  ;
-
-  _createClass(Token, [{
-    key: "wrapped",
-    get: function get() {
-      return this;
-    }
-  }]);
-
-  return Token;
-}(BaseCurrency);
+  get wrapped() {
+    return this;
+  }
+}
 
-var _WETH;
 /**
  * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped
  */
-
-var WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH);
+const WETH9 = {
+  [1]: /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),
+  [3]: /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),
+  [4]: /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),
+  [5]: /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),
+  [42]: /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),
+  [10]: /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  [69]: /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  [42161]: /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),
+  [421611]: /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),
+  [8453]: /*#__PURE__*/new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  [56]: /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),
+  [792]: /*#__PURE__*/new Token(792, '0x1D7A42e67F9C5592d1927a7B47e32Ae809561fE0', 18, 'WTBT', 'Wrapped TBT'),
+  [137]: /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),
+  [43114]: /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')
+};
 
 /**
  * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets
  */
-
-var Ether = /*#__PURE__*/function (_NativeCurrency) {
-  _inheritsLoose(Ether, _NativeCurrency);
-
-  function Ether(chainId) {
-    return _NativeCurrency.call(this, chainId, 18, 'ETH', 'Ether') || this;
+class Ether extends NativeCurrency {
+  constructor(chainId) {
+    super(chainId, 18, 'ETH', 'Ether');
   }
-
-  Ether.onChain = function onChain(chainId) {
-    var _this$_etherCache$cha;
-
-    return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether(chainId);
-  };
-
-  var _proto = Ether.prototype;
-
-  _proto.equals = function equals(other) {
+  get wrapped() {
+    const weth9 = WETH9[this.chainId];
+    !!!weth9 ? process.env.NODE_ENV !== "production" ? invariant(false, 'WRAPPED') : invariant(false) : void 0;
+    return weth9;
+  }
+  static onChain(chainId) {
+    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId));
+  }
+  equals(other) {
     return other.isNative && other.chainId === this.chainId;
-  };
-
-  _createClass(Ether, [{
-    key: "wrapped",
-    get: function get() {
-      var weth9 = WETH9[this.chainId];
-      !!!weth9 ? process.env.NODE_ENV !== "production" ? invariant(false, 'WRAPPED') : invariant(false) : void 0;
-      return weth9;
-    }
-  }]);
-
-  return Ether;
-}(NativeCurrency);
+  }
+}
 Ether._etherCache = {};
 
 /**
@@ -911,75 +743,66 @@ Ether._etherCache = {};
  * @param inputAmount the input amount of the trade
  * @param outputAmount the output amount of the trade
  */
-
 function computePriceImpact(midPrice, inputAmount, outputAmount) {
-  var quotedOutputAmount = midPrice.quote(inputAmount); // calculate price impact := (exactQuote - outputAmount) / exactQuote
-
-  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);
+  const quotedOutputAmount = midPrice.quote(inputAmount);
+  // calculate price impact := (exactQuote - outputAmount) / exactQuote
+  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);
   return new Percent(priceImpact.numerator, priceImpact.denominator);
 }
 
+// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to
 // `maxSize` by removing the last item
-
 function sortedInsert(items, add, maxSize, comparator) {
-  !(maxSize > 0) ? process.env.NODE_ENV !== "production" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize
-
-  !(items.length <= maxSize) ? process.env.NODE_ENV !== "production" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add
-
+  !(maxSize > 0) ? process.env.NODE_ENV !== "production" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0;
+  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize
+  !(items.length <= maxSize) ? process.env.NODE_ENV !== "production" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0;
+  // short circuit first item add
   if (items.length === 0) {
     items.push(add);
     return null;
   } else {
-    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item
-
+    const isFull = items.length === maxSize;
+    // short circuit if full and the additional item does not come before the last item
     if (isFull && comparator(items[items.length - 1], add) <= 0) {
       return add;
     }
-
-    var lo = 0,
-        hi = items.length;
-
+    let lo = 0,
+      hi = items.length;
     while (lo < hi) {
-      var mid = lo + hi >>> 1;
-
+      const mid = lo + hi >>> 1;
       if (comparator(items[mid], add) <= 0) {
         lo = mid + 1;
       } else {
         hi = mid;
       }
     }
-
     items.splice(lo, 0, add);
     return isFull ? items.pop() : null;
   }
 }
 
-var MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);
-var ZERO = /*#__PURE__*/JSBI.BigInt(0);
-var ONE = /*#__PURE__*/JSBI.BigInt(1);
-var TWO = /*#__PURE__*/JSBI.BigInt(2);
+const MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);
+const ZERO = /*#__PURE__*/JSBI.BigInt(0);
+const ONE = /*#__PURE__*/JSBI.BigInt(1);
+const TWO = /*#__PURE__*/JSBI.BigInt(2);
 /**
  * Computes floor(sqrt(value))
  * @param value the value for which to compute the square root, rounded down
  */
-
 function sqrt(value) {
-  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== "production" ? invariant(false, 'NEGATIVE') : invariant(false) : void 0; // rely on built in sqrt if possible
-
+  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== "production" ? invariant(false, 'NEGATIVE') : invariant(false) : void 0;
+  // rely on built in sqrt if possible
   if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {
     return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));
   }
-
-  var z;
-  var x;
+  let z;
+  let x;
   z = value;
   x = JSBI.add(JSBI.divide(value, TWO), ONE);
-
   while (JSBI.lessThan(x, z)) {
     z = x;
     x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);
   }
-
   return z;
 }
 
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map
index 231d7c8..38c2f76 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"sdk-core.esm.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = constructSameAddressMap(V2_FACTORY_ADDRESS)\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = constructSameAddressMap(V2_ROUTER_ADDRESS)\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (chainId == ChainId.BNB) {\n    return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\n  }\n  return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","ARBITRUM_ONE","ARBITRUM_GOERLI","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAYA;;AAAZ,WAAYA;AACVA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,8BAAA,WAAA;AACAA,EAAAA,sCAAA,YAAA;AACAA,EAAAA,iCAAA,aAAA;AACAA,EAAAA,yCAAA,oBAAA;AACAA,EAAAA,wCAAA,iBAAA;AACAA,EAAAA,4CAAA,oBAAA;AACAA,EAAAA,iCAAA,YAAA;AACAA,EAAAA,0CAAA,mBAAA;AACAA,EAAAA,gCAAA,SAAA;AACAA,EAAAA,0CAAA,mBAAA;AACAA,EAAAA,gCAAA,WAAA;AACAA,EAAAA,mCAAA,aAAA;AACAA,EAAAA,4BAAA,QAAA;AACAA,EAAAA,qCAAA,cAAA;AACAA,EAAAA,uCAAA,gBAAA;AACAA,EAAAA,+BAAA,SAAA;AACD,CAlBD,EAAYA,OAAO,KAAPA,OAAO,KAAA,CAAnB;;IAoBaC,gBAAgB,GAAG,CAC9BD,OAAO,CAACE,OADsB,EAE9BF,OAAO,CAACG,QAFsB,EAG9BH,OAAO,CAACI,eAHsB,EAI9BJ,OAAO,CAACK,YAJsB,EAK9BL,OAAO,CAACM,eALsB,EAM9BN,OAAO,CAACO,OANsB,EAO9BP,OAAO,CAACQ,cAPsB,EAQ9BR,OAAO,CAACS,MARsB,EAS9BT,OAAO,CAACU,OATsB,EAU9BV,OAAO,CAACW,cAVsB,EAW9BX,OAAO,CAACY,IAXsB,EAY9BZ,OAAO,CAACa,GAZsB,EAa9Bb,OAAO,CAACc,SAbsB,EAc9Bd,OAAO,CAACe,IAdsB,EAe9Bf,OAAO,CAACgB,WAfsB;IAmBpBC;;AAAZ,WAAYA;AACV;AACAA,EAAAA,2BAAA,QAAA;AACAA,EAAAA,2BAAA,UAAA;AACAA,EAAAA,0BAAA,SAAA;AACAA,EAAAA,4BAAA,SAAA;AACAA,EAAAA,8BAAA,SAAA;AACAA,EAAAA,yBAAA,QAAA;AACAA,EAAAA,0BAAA,SAAA;AACD,CATD,EAAYA,kBAAkB,KAAlBA,kBAAkB,KAAA,CAA9B;;;ACxBA,IAAMC,gBAAgB,GAAG,CAAClB,OAAO,CAACE,OAAT,EAAkBF,OAAO,CAACS,MAA1B,CAAzB;;AAEA,SAASU,uBAAT,CAAiCC,OAAjC,EAAkDC,kBAAlD;MAAkDA;AAAAA,IAAAA,qBAAgC;;;AAChF,SAAOH,gBAAgB,CAACI,MAAjB,CAAwBD,kBAAxB,EAA4CE,MAA5C,CAA+D,UAACC,IAAD,EAAOC,OAAP;AACpED,IAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgBL,OAAhB;AACA,WAAOI,IAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID;;AAED,IAAaE,aAAa,gBAAeP,uBAAuB,CAAC,4CAAD,EAA+C,CAC7GnB,OAAO,CAACG,QADqG,EAE7GH,OAAO,CAACK,YAFqG,EAG7GL,OAAO,CAACO,OAHqG,EAI7GP,OAAO,CAACQ,cAJqG,EAK7GR,OAAO,CAACU,OALqG,CAA/C,CAAzD;AAQP,IAAaiB,iCAAiC,GAAG,4CAA1C;AAEP,IAAaC,kBAAkB,GAAG,4CAA3B;AACP,IAAaC,oBAAoB,gBAAeV,uBAAuB,CAACS,kBAAD,CAAhE;AACP,IAAaE,iBAAiB,GAAG,4CAA1B;AACP,IAAaC,mBAAmB,gBAAeZ,uBAAuB,CAACW,iBAAD,CAA/D;;AAGP,IAAME,iBAAiB,GAAmB;AACxCC,EAAAA,oBAAoB,EAAE,4CADkB;AAExCC,EAAAA,gBAAgB,EAAE,4CAFsB;AAGxCC,EAAAA,aAAa,EAAE,4CAHyB;AAIxCC,EAAAA,iBAAiB,EAAE,4CAJqB;AAKxCC,EAAAA,iCAAiC,EAAE;AALK,CAA1C;;AAOA,IAAMC,iBAAiB,6BAClBN,iBADkB;AAErBO,EAAAA,yBAAyB,EAAE;AAFN,EAAvB;;AAIA,IAAMC,gBAAgB,6BACjBR,iBADiB;AAEpBO,EAAAA,yBAAyB,EAAE;AAFP,EAAtB;;AAKA,IAAME,kBAAkB,GAAmBT,iBAA3C;;AACA,IAAMU,sBAAsB,6BACvBV,iBADuB;AAE1BE,EAAAA,gBAAgB,EAAE,4CAFQ;AAG1BS,EAAAA,eAAe,EAAE;AAHS,EAA5B;;AAKA,IAAMC,iBAAiB,GAAmBZ,iBAA1C;;AAGA,IAAMa,cAAc,GAAmB;AACrCZ,EAAAA,oBAAoB,EAAE,4CADe;AAErCC,EAAAA,gBAAgB,EAAE,4CAFmB;AAGrCC,EAAAA,aAAa,EAAE,4CAHsB;AAIrCC,EAAAA,iBAAiB,EAAE,4CAJkB;AAKrCC,EAAAA,iCAAiC,EAAE,4CALE;AAMrCM,EAAAA,eAAe,EAAE;AANoB,CAAvC;;AAUA,IAAMG,aAAa,GAAmB;AACpCb,EAAAA,oBAAoB,EAAE,4CADc;AAEpCC,EAAAA,gBAAgB,EAAE,4CAFkB;AAGpCC,EAAAA,aAAa,EAAE,4CAHqB;AAIpCC,EAAAA,iBAAiB,EAAE,4CAJiB;AAKpCC,EAAAA,iCAAiC,EAAE,4CALC;AAMpCM,EAAAA,eAAe,EAAE,4CANmB;AAOpCI,EAAAA,mBAAmB,EAAE;AAPe,CAAtC;;AAWA,IAAMC,yBAAyB,GAAmB;AAChDf,EAAAA,oBAAoB,EAAE,4CAD0B;AAEhDC,EAAAA,gBAAgB,EAAE,4CAF8B;AAGhDC,EAAAA,aAAa,EAAE,4CAHiC;AAIhDC,EAAAA,iBAAiB,EAAE,4CAJ6B;AAKhDC,EAAAA,iCAAiC,EAAE,4CALa;AAMhDM,EAAAA,eAAe,EAAE;AAN+B,CAAlD;;AAUA,IAAMM,yBAAyB,GAAmB;AAChDhB,EAAAA,oBAAoB,EAAE,4CAD0B;AAEhDC,EAAAA,gBAAgB,EAAE,4CAF8B;AAGhDC,EAAAA,aAAa,EAAE,4CAHiC;AAIhDC,EAAAA,iBAAiB,EAAE,4CAJ6B;AAKhDC,EAAAA,iCAAiC,EAAE,4CALa;AAMhDM,EAAAA,eAAe,EAAE;AAN+B,CAAlD;;AAUA,IAAMO,iBAAiB,GAAmB;AACxCjB,EAAAA,oBAAoB,EAAE,4CADkB;AAExCC,EAAAA,gBAAgB,EAAE,4CAFsB;AAGxCC,EAAAA,aAAa,EAAE,4CAHyB;AAIxCC,EAAAA,iBAAiB,EAAE,4CAJqB;AAKxCC,EAAAA,iCAAiC,EAAE,4CALK;AAMxCM,EAAAA,eAAe,EAAE;AANuB,CAA1C;;AAUA,IAAMQ,mBAAmB,GAAmB;AAC1ClB,EAAAA,oBAAoB,EAAE,4CADoB;AAE1CC,EAAAA,gBAAgB,EAAE,4CAFwB;AAG1CC,EAAAA,aAAa,EAAE,4CAH2B;AAI1CC,EAAAA,iBAAiB,EAAE,4CAJuB;AAK1CC,EAAAA,iCAAiC,EAAE,4CALO;AAM1CM,EAAAA,eAAe,EAAE,4CANyB;AAO1CI,EAAAA,mBAAmB,EAAE;AAPqB,CAA5C;AAUA,IAAMK,cAAc,GAAmB;AACrCnB,EAAAA,oBAAoB,EAAE,4CADe;AAErCC,EAAAA,gBAAgB,EAAE,4CAFmB;AAGrCC,EAAAA,aAAa,EAAE,4CAHsB;AAIrCC,EAAAA,iBAAiB,EAAE,4CAJkB;AAKrCC,EAAAA,iCAAiC,EAAE,4CALE;AAMrCM,EAAAA,eAAe,EAAE,4CANoB;AAOrCI,EAAAA,mBAAmB,EAAE;AAPgB,CAAvC;;AAWA,IAAMM,qBAAqB,GAAmB;AAC5CpB,EAAAA,oBAAoB,EAAE,4CADsB;AAE5CC,EAAAA,gBAAgB,EAAE,4CAF0B;AAG5CC,EAAAA,aAAa,EAAE,4CAH6B;AAI5CC,EAAAA,iBAAiB,EAAE,4CAJyB;AAK5CC,EAAAA,iCAAiC,EAAE,4CALS;AAM5CM,EAAAA,eAAe,EAAE,4CAN2B;AAO5CI,EAAAA,mBAAmB,EAAE;AAPuB,CAA9C;AAUA,IAAaO,sBAAsB,sDAChCtD,OAAO,CAACE,OADwB,IACdoC,iBADc,wBAEhCtC,OAAO,CAACG,QAFwB,IAEbsC,kBAFa,wBAGhCzC,OAAO,CAACK,YAHwB,IAGTqC,sBAHS,wBAIhC1C,OAAO,CAACO,OAJwB,IAIdqC,iBAJc,wBAKhC5C,OAAO,CAACQ,cALwB,IAKPoC,iBALO,wBAMhC5C,OAAO,CAACS,MANwB,IAMf+B,gBANe,wBAOhCxC,OAAO,CAACY,IAPwB,IAOjBiC,cAPiB,wBAQhC7C,OAAO,CAACW,cARwB,IAQPkC,cARO,wBAShC7C,OAAO,CAACa,GATwB,IASlBiC,aATkB,wBAUhC9C,OAAO,CAACI,eAVwB,IAUN4C,yBAVM,wBAWhChD,OAAO,CAACM,eAXwB,IAWN2C,yBAXM,wBAYhCjD,OAAO,CAACU,OAZwB,IAYdwC,iBAZc,wBAahClD,OAAO,CAACc,SAbwB,IAaZqC,mBAbY,wBAchCnD,OAAO,CAACe,IAdwB,IAcjBqC,cAdiB,wBAehCpD,OAAO,CAACgB,WAfwB,IAeVqC,qBAfU,wBAA5B;AAkBP;;AACA,IAAaE,yBAAyB,0CACjCtD,gBAAgB,CAACsB,MAAjB,CAAoC,UAACC,IAAD,EAAOC,OAAP;AACrCD,EAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgB6B,sBAAsB,CAAC7B,OAAD,CAAtB,CAAgCQ,oBAAhD;AACA,SAAOT,IAAP;AACD,CAHE,EAGA,EAHA,CADiC,CAA/B;AAOP,IAAagC,qBAAqB,0CAC7BvD,gBAAgB,CAACsB,MAAjB,CAAoC,UAACC,IAAD,EAAOC,OAAP;AACrC,MAAMW,iBAAiB,GAAGkB,sBAAsB,CAAC7B,OAAD,CAAtB,CAAgCW,iBAA1D;;AACA,MAAIA,iBAAJ,EAAuB;AACrBZ,IAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgBW,iBAAhB;AACD;;AACD,SAAOZ,IAAP;AACD,CANE,EAMA,EANA,CAD6B,CAA3B;AAUP,IAAaiC,mBAAmB,0CAC3BxD,gBAAgB,CAACsB,MAAjB,CAAoC,UAACC,IAAD,EAAOC,OAAP;AACrCD,EAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgB6B,sBAAsB,CAAC7B,OAAD,CAAtB,CAAgCS,gBAAhD;AACA,SAAOV,IAAP;AACD,CAHE,EAGA,EAHA,CAD2B,CAAzB;AAOP;;;;AAGA,IAAakC,6BAA6B,gBAAevC,uBAAuB,CAC9E,4CAD8E,CAAzE;AAGP;;;;AAGA,IAAawC,6BAA6B,sDACvC3D,OAAO,CAACE,OAD+B,IACrB,4CADqB,wBAAnC;AAGP;;;;AAGA,IAAa0D,0BAA0B,sDACpC5D,OAAO,CAACE,OAD4B,IAClB,4CADkB,wBAAhC;AAIP,IAAa2D,kBAAkB,gBAAe1C,uBAAuB,CAAC,4CAAD,CAA9D;AAEP,IAAa2C,0BAA0B,sDACpC9D,OAAO,CAACE,OAD4B,IAClB,4CADkB,wBAAhC;AAIP,IAAa6D,8BAA8B,sDACxC/D,OAAO,CAACE,OADgC,IACtB,4CADsB,wBAApC;AAIP,IAAa8D,gBAAgB,0CACxB/D,gBAAgB,CAACsB,MAAjB,CAAoC,UAACC,IAAD,EAAOC,OAAP;AACrCD,EAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgB6B,sBAAsB,CAAC7B,OAAD,CAAtB,CAAgCU,aAAhD;AACA,SAAOX,IAAP;AACD,CAHE,EAGA,EAHA,CADwB,CAAtB;AAOP,IAAayC,sCAAsC,0CAC9ChE,gBAAgB,CAACsB,MAAjB,CAAoC,UAACC,IAAD,EAAOC,OAAP;AACrC,MAAMY,iCAAiC,GAAGiB,sBAAsB,CAAC7B,OAAD,CAAtB,CAAgCY,iCAA1E;;AACA,MAAIA,iCAAJ,EAAuC;AACrCb,IAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgBY,iCAAhB;AACD;;AACD,SAAOb,IAAP;AACD,CANE,EAMA,EANA,CAD8C,CAA5C;AAUP,IAAa0C,uBAAuB,0CAC/B/C,uBAAuB,CAAC,4CAAD,CADQ,CAA7B;AAIP,IAAagD,0BAA0B,sDACpCnE,OAAO,CAACE,OAD4B,IAClB,4CADkB,wBAAhC;AAIP,IAAakE,mBAAmB,0CAC3BnE,gBAAgB,CAACsB,MAAjB,CAAoC,UAACC,IAAD,EAAOC,OAAP;AACrC,MAAMkB,eAAe,GAAGW,sBAAsB,CAAC7B,OAAD,CAAtB,CAAgCkB,eAAxD;;AACA,MAAIA,eAAJ,EAAqB;AACnBnB,IAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgBkB,eAAhB;AACD;;AACD,SAAOnB,IAAP;AACD,CANE,EAMA,EANA,CAD2B,CAAzB;AAUP,IAAa6C,+BAA+B,gBAAepE,gBAAgB,CAACsB,MAAjB,CAAoC,UAACC,IAAD,EAAOC,OAAP;AAC7F,MAAMc,yBAAyB,GAAGe,sBAAsB,CAAC7B,OAAD,CAAtB,CAAgCc,yBAAlE;;AACA,MAAIA,yBAAJ,EAA+B;AAC7Bf,IAAAA,IAAI,CAACC,OAAD,CAAJ,GAAgBc,yBAAhB;AACD;;AACD,SAAOf,IAAP;AACD,CAN0D,EAMxD,EANwD,CAApD;AAQP,IAAa8C,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAC7C,OAAD;AACtC,MAAIA,OAAO,IAAIzB,OAAO,CAACa,GAAvB,EAA4B;AAC1B,WAAOyC,sBAAsB,CAAC7B,OAAD,CAAtB,CAAgCsB,mBAAvC;AACD;;AACD,SAAO,4CAAP;AACD,CALM;;ICjQKwB,SAAZ;;AAAA,WAAYA;AACVA,EAAAA,uCAAA,gBAAA;AACAA,EAAAA,wCAAA,iBAAA;AACD,CAHD,EAAYA,SAAS,KAATA,SAAS,KAAA,CAArB;;AAKA,IAAYC,QAAZ;;AAAA,WAAYA;AACVA,EAAAA,oCAAA,eAAA;AACAA,EAAAA,uCAAA,kBAAA;AACAA,EAAAA,kCAAA,aAAA;AACD,CAJD,EAAYA,QAAQ,KAARA,QAAQ,KAAA,CAApB;;AAMA,IAAaC,UAAU,gBAAGC,IAAI,CAACC,MAAL,CAAY,oEAAZ,CAAnB;;;ACRP,IAAMC,OAAO,gBAAGC,QAAQ,CAACC,QAAD,CAAxB;AACA,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAMC,qBAAqB,sDACxBT,QAAQ,CAACU,UADe,IACFN,OAAO,CAACM,UADN,wBAExBV,QAAQ,CAACW,aAFe,IAECP,OAAO,CAACO,aAFT,wBAGxBX,QAAQ,CAACY,QAHe,IAGJR,OAAO,CAACQ,QAHJ,wBAA3B;AAMA,IAAMC,eAAe,4CAClBb,QAAQ,CAACU,UADS,KAAA,mBAElBV,QAAQ,CAACW,aAFS,KAAA,mBAGlBX,QAAQ,CAACY,QAHS,KAAA,mBAArB;AAMA,IAAaE,QAAb;AAIE,oBAAmBC,SAAnB,EAAyCC,WAAzC;QAAyCA;AAAAA,MAAAA,cAAyBd,IAAI,CAACC,MAAL,CAAY,CAAZ;;;AAChE,SAAKY,SAAL,GAAiBb,IAAI,CAACC,MAAL,CAAYY,SAAZ,CAAjB;AACA,SAAKC,WAAL,GAAmBd,IAAI,CAACC,MAAL,CAAYa,WAAZ,CAAnB;AACD;;AAPH,WASiBC,gBATjB,GASU,0BAAwBC,WAAxB;AACN,QAAIA,WAAW,YAAYhB,IAAvB,IAA+B,OAAOgB,WAAP,KAAuB,QAAtD,IAAkE,OAAOA,WAAP,KAAuB,QAA7F,EACE,OAAO,IAAIJ,QAAJ,CAAaI,WAAb,CAAP;AAEF,QAAI,eAAeA,WAAf,IAA8B,iBAAiBA,WAAnD,EAAgE,OAAOA,WAAP;AAChE,UAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD,GAfH;AAAA;;AAAA;;AAAA,SA2BSC,MA3BT,GA2BS;AACL,WAAO,IAAIN,QAAJ,CAAa,KAAKE,WAAlB,EAA+B,KAAKD,SAApC,CAAP;AACD,GA7BH;;AAAA,SA+BSM,GA/BT,GA+BS,aAAIC,KAAJ;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;;AACA,QAAIpB,IAAI,CAACsB,KAAL,CAAW,KAAKR,WAAhB,EAA6BO,WAAW,CAACP,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAaZ,IAAI,CAACmB,GAAL,CAAS,KAAKN,SAAd,EAAyBQ,WAAW,CAACR,SAArC,CAAb,EAA8D,KAAKC,WAAnE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACLZ,IAAI,CAACmB,GAAL,CACEnB,IAAI,CAACuB,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADF,EAEEd,IAAI,CAACuB,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLd,IAAI,CAACuB,QAAL,CAAc,KAAKT,WAAnB,EAAgCO,WAAW,CAACP,WAA5C,CALK,CAAP;AAOD,GA3CH;;AAAA,SA6CSU,QA7CT,GA6CS,kBAASJ,KAAT;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;;AACA,QAAIpB,IAAI,CAACsB,KAAL,CAAW,KAAKR,WAAhB,EAA6BO,WAAW,CAACP,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAaZ,IAAI,CAACwB,QAAL,CAAc,KAAKX,SAAnB,EAA8BQ,WAAW,CAACR,SAA1C,CAAb,EAAmE,KAAKC,WAAxE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACLZ,IAAI,CAACwB,QAAL,CACExB,IAAI,CAACuB,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADF,EAEEd,IAAI,CAACuB,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLd,IAAI,CAACuB,QAAL,CAAc,KAAKT,WAAnB,EAAgCO,WAAW,CAACP,WAA5C,CALK,CAAP;AAOD,GAzDH;;AAAA,SA2DSW,QA3DT,GA2DS,kBAASL,KAAT;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAOpB,IAAI,CAACyB,QAAL,CACLzB,IAAI,CAACuB,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADK,EAELd,IAAI,CAACuB,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAjEH;;AAAA,SAmESY,OAnET,GAmES,iBAAQN,KAAR;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAOpB,IAAI,CAACsB,KAAL,CACLtB,IAAI,CAACuB,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADK,EAELd,IAAI,CAACuB,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzEH;;AAAA,SA2ESa,WA3ET,GA2ES,qBAAYP,KAAZ;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAOpB,IAAI,CAAC2B,WAAL,CACL3B,IAAI,CAACuB,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADK,EAELd,IAAI,CAACuB,QAAL,CAAcF,WAAW,CAACR,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAjFH;;AAAA,SAmFSS,QAnFT,GAmFS,kBAASH,KAAT;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAO,IAAIR,QAAJ,CACLZ,IAAI,CAACuB,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACR,SAA1C,CADK,EAELb,IAAI,CAACuB,QAAL,CAAc,KAAKT,WAAnB,EAAgCO,WAAW,CAACP,WAA5C,CAFK,CAAP;AAID,GAzFH;;AAAA,SA2FSc,MA3FT,GA2FS,gBAAOR,KAAP;AACL,QAAMC,WAAW,GAAGT,QAAQ,CAACG,gBAAT,CAA0BK,KAA1B,CAApB;AACA,WAAO,IAAIR,QAAJ,CACLZ,IAAI,CAACuB,QAAL,CAAc,KAAKV,SAAnB,EAA8BQ,WAAW,CAACP,WAA1C,CADK,EAELd,IAAI,CAACuB,QAAL,CAAc,KAAKT,WAAnB,EAAgCO,WAAW,CAACR,SAA5C,CAFK,CAAP;AAID,GAjGH;;AAAA,SAmGSgB,aAnGT,GAmGS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBlC,QAAQ,CAACW;;;AAE9B,KAAUyB,MAAM,CAACC,SAAP,CAAiBL,iBAAjB,CAAV,2CAAAM,SAAS,QAAyCN,iBAAzC,yBAAT,GAAAM,SAAS,OAAT;AACA,MAAUN,iBAAiB,GAAG,CAA9B,4CAAAM,SAAS,QAA2BN,iBAA3B,uBAAT,GAAAM,SAAS,OAAT;AAEAlC,IAAAA,OAAO,CAACmC,GAAR,CAAY;AAAEC,MAAAA,SAAS,EAAER,iBAAiB,GAAG,CAAjC;AAAoCE,MAAAA,QAAQ,EAAEzB,qBAAqB,CAACyB,QAAD;AAAnE,KAAZ;AACA,QAAMO,QAAQ,GAAG,IAAIrC,OAAJ,CAAY,KAAKW,SAAL,CAAe2B,QAAf,EAAZ,EACdC,GADc,CACV,KAAK3B,WAAL,CAAiB0B,QAAjB,EADU,EAEdE,mBAFc,CAEMZ,iBAFN,CAAjB;AAGA,WAAOS,QAAQ,CAACpC,QAAT,CAAkBoC,QAAQ,CAACI,aAAT,EAAlB,EAA4CZ,MAA5C,CAAP;AACD,GAhHH;;AAAA,SAkHSa,OAlHT,GAkHS,iBACLD,aADK,EAELZ,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBlC,QAAQ,CAACW;;;AAE9B,KAAUyB,MAAM,CAACC,SAAP,CAAiBQ,aAAjB,CAAV,2CAAAP,SAAS,QAAqCO,aAArC,yBAAT,GAAAP,SAAS,OAAT;AACA,MAAUO,aAAa,IAAI,CAA3B,4CAAAP,SAAS,QAAwBO,aAAxB,mBAAT,GAAAP,SAAS,OAAT;AAEA/B,IAAAA,GAAG,CAACwC,EAAJ,GAASF,aAAT;AACAtC,IAAAA,GAAG,CAACyC,EAAJ,GAASnC,eAAe,CAACqB,QAAD,CAAxB;AACA,WAAO,IAAI3B,GAAJ,CAAQ,KAAKQ,SAAL,CAAe2B,QAAf,EAAR,EAAmCC,GAAnC,CAAuC,KAAK3B,WAAL,CAAiB0B,QAAjB,EAAvC,EAAoErC,QAApE,CAA6EwC,aAA7E,EAA4FZ,MAA5F,CAAP;AACD;AAED;;;AA/HF;;AAAA;AAAA;AAAA;AAmBI,aAAO/B,IAAI,CAAC4B,MAAL,CAAY,KAAKf,SAAjB,EAA4B,KAAKC,WAAjC,CAAP;AACD,KApBH;;AAAA;AAAA;AAAA;AAwBI,aAAO,IAAIF,QAAJ,CAAaZ,IAAI,CAAC+C,SAAL,CAAe,KAAKlC,SAApB,EAA+B,KAAKC,WAApC,CAAb,EAA+D,KAAKA,WAApE,CAAP;AACD;AAzBH;AAAA;AAAA;AAmII,aAAO,IAAIF,QAAJ,CAAa,KAAKC,SAAlB,EAA6B,KAAKC,WAAlC,CAAP;AACD;AApIH;;AAAA;AAAA;;ACbA,IAAMT,KAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAa0C,cAAb;AAAA;;AA2BE,0BAAsBC,QAAtB,EAAmCpC,SAAnC,EAAyDC,WAAzD;;;AACE,iCAAMD,SAAN,EAAiBC,WAAjB;AACA,KAAUd,IAAI,CAACkD,eAAL,CAAqB,MAAKX,QAA1B,EAAoCxC,UAApC,CAAV,2CAAAqC,SAAS,QAAkD,QAAlD,CAAT,GAAAA,SAAS,OAAT;AACA,UAAKa,QAAL,GAAgBA,QAAhB;AACA,UAAKE,YAAL,GAAoBnD,IAAI,CAACoD,YAAL,CAAkBpD,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAlB,EAAmCD,IAAI,CAACC,MAAL,CAAYgD,QAAQ,CAACI,QAArB,CAAnC,CAApB;;AACD;AA5BD;;;;;;;AAJF,iBASgBC,aAThB,GASS,uBAAyCL,QAAzC,EAAsDM,SAAtD;AACL,WAAO,IAAIP,cAAJ,CAAmBC,QAAnB,EAA6BM,SAA7B,CAAP;AACD;AAED;;;;;;AAbF;;AAAA,iBAmBgBC,oBAnBhB,GAmBS,8BACLP,QADK,EAELpC,SAFK,EAGLC,WAHK;AAKL,WAAO,IAAIkC,cAAJ,CAAmBC,QAAnB,EAA6BpC,SAA7B,EAAwCC,WAAxC,CAAP;AACD,GAzBH;;AAAA;;AAAA,SAkCSK,GAlCT,GAkCS,aAAIC,KAAJ;AACL,KAAU,KAAK6B,QAAL,CAAcQ,MAAd,CAAqBrC,KAAK,CAAC6B,QAA3B,CAAV,2CAAAb,SAAS,QAAuC,UAAvC,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAMsB,KAAK,uBAASvC,GAAT,YAAaC,KAAb,CAAX;;AACA,WAAO4B,cAAc,CAACQ,oBAAf,CAAoC,KAAKP,QAAzC,EAAmDS,KAAK,CAAC7C,SAAzD,EAAoE6C,KAAK,CAAC5C,WAA1E,CAAP;AACD,GAtCH;;AAAA,SAwCSU,QAxCT,GAwCS,kBAASJ,KAAT;AACL,KAAU,KAAK6B,QAAL,CAAcQ,MAAd,CAAqBrC,KAAK,CAAC6B,QAA3B,CAAV,2CAAAb,SAAS,QAAuC,UAAvC,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAMuB,UAAU,uBAASnC,QAAT,YAAkBJ,KAAlB,CAAhB;;AACA,WAAO4B,cAAc,CAACQ,oBAAf,CAAoC,KAAKP,QAAzC,EAAmDU,UAAU,CAAC9C,SAA9D,EAAyE8C,UAAU,CAAC7C,WAApF,CAAP;AACD,GA5CH;;AAAA,SA8CSS,QA9CT,GA8CS,kBAASH,KAAT;AACL,QAAMwC,UAAU,uBAASrC,QAAT,YAAkBH,KAAlB,CAAhB;;AACA,WAAO4B,cAAc,CAACQ,oBAAf,CAAoC,KAAKP,QAAzC,EAAmDW,UAAU,CAAC/C,SAA9D,EAAyE+C,UAAU,CAAC9C,WAApF,CAAP;AACD,GAjDH;;AAAA,SAmDSc,MAnDT,GAmDS,gBAAOR,KAAP;AACL,QAAMyC,OAAO,uBAASjC,MAAT,YAAgBR,KAAhB,CAAb;;AACA,WAAO4B,cAAc,CAACQ,oBAAf,CAAoC,KAAKP,QAAzC,EAAmDY,OAAO,CAAChD,SAA3D,EAAsEgD,OAAO,CAAC/C,WAA9E,CAAP;AACD,GAtDH;;AAAA,SAwDSe,aAxDT,GAwDS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QACLF;AAAAA,MAAAA,oBAA4B;;;QAE5BE;AAAAA,MAAAA,WAAqBlC,QAAQ,CAACU;;;AAE9B,WAAO,oBAAMoB,MAAN,YAAa,KAAKuB,YAAlB,EAAgCtB,aAAhC,CAA8CC,iBAA9C,EAAiEC,MAAjE,EAAyEC,QAAzE,CAAP;AACD,GA9DH;;AAAA,SAgESY,OAhET,GAgES,iBACLD,aADK,EAELZ,MAFK,EAGLC,QAHK;QACLW;AAAAA,MAAAA,gBAAwB,KAAKM,QAAL,CAAcI;;;QAEtCrB;AAAAA,MAAAA,WAAqBlC,QAAQ,CAACU;;;AAE9B,MAAUmC,aAAa,IAAI,KAAKM,QAAL,CAAcI,QAAzC,4CAAAjB,SAAS,QAA0C,UAA1C,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO,oBAAMR,MAAN,YAAa,KAAKuB,YAAlB,EAAgCP,OAAhC,CAAwCD,aAAxC,EAAuDZ,MAAvD,EAA+DC,QAA/D,CAAP;AACD,GAvEH;;AAAA,SAyES8B,OAzET,GAyES,iBAAQ/B,MAAR;QAAQA;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;AAC9B5B,IAAAA,KAAG,CAACwC,EAAJ,GAAS,KAAKI,QAAL,CAAcI,QAAvB;AACA,WAAO,IAAIhD,KAAJ,CAAQ,KAAKkC,QAAL,CAAcC,QAAd,EAAR,EAAkCC,GAAlC,CAAsC,KAAKU,YAAL,CAAkBX,QAAlB,EAAtC,EAAoErC,QAApE,CAA6E4B,MAA7E,CAAP;AACD,GA5EH;;AAAA;AAAA;AAAA;AA+EI,UAAI,KAAKkB,QAAL,CAAcc,OAAlB,EAA2B,OAAO,IAAP;AAC3B,aAAOf,cAAc,CAACQ,oBAAf,CAAoC,KAAKP,QAAL,CAAce,OAAlD,EAA2D,KAAKnD,SAAhE,EAA2E,KAAKC,WAAhF,CAAP;AACD;AAjFH;;AAAA;AAAA,EAAwDF,QAAxD;;ACRA,IAAMqD,WAAW,gBAAG,IAAIrD,QAAJ,eAAaZ,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb,CAApB;AAEA;;;;;AAIA,SAASiE,SAAT,CAAmBC,QAAnB;AACE,SAAO,IAAIC,OAAJ,CAAYD,QAAQ,CAACtD,SAArB,EAAgCsD,QAAQ,CAACrD,WAAzC,CAAP;AACD;;AAED,IAAasD,OAAb;AAAA;;AAAA;;;;AACE;;;;AAGgB,mBAAA,GAAkB,IAAlB;;AAyBjB;;AA7BD;;AAAA,SAMEjD,GANF,GAME,aAAIC,KAAJ;AACE,WAAO8C,SAAS,qBAAO/C,GAAP,YAAWC,KAAX,EAAhB;AACD,GARH;;AAAA,SAUEI,QAVF,GAUE,kBAASJ,KAAT;AACE,WAAO8C,SAAS,qBAAO1C,QAAP,YAAgBJ,KAAhB,EAAhB;AACD,GAZH;;AAAA,SAcEG,QAdF,GAcE,kBAASH,KAAT;AACE,WAAO8C,SAAS,qBAAO3C,QAAP,YAAgBH,KAAhB,EAAhB;AACD,GAhBH;;AAAA,SAkBEQ,MAlBF,GAkBE,gBAAOR,KAAP;AACE,WAAO8C,SAAS,qBAAOtC,MAAP,YAAcR,KAAd,EAAhB;AACD,GApBH;;AAAA,SAsBSS,aAtBT,GAsBS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,oBAAMP,QAAN,YAAe0C,WAAf,EAA4BpC,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;AACD,GAxBH;;AAAA,SA0BSY,OA1BT,GA0BS,iBAAQD,aAAR,EAAmCZ,MAAnC,EAAoDC,QAApD;QAAQW;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,oBAAMpB,QAAN,YAAe0C,WAAf,EAA4BrB,OAA5B,CAAoCD,aAApC,EAAmDZ,MAAnD,EAA2DC,QAA3D,CAAP;AACD,GA5BH;;AAAA;AAAA,EAA6BpB,QAA7B;;ICNayD,KAAb;AAAA;;AAKE;;;;AAIA;;;AAKE,QAAIC,YAAJ,EAAyBC,aAAzB,EAAgDzD,WAAhD,EAAwED,SAAxE;;sCAJG2D;AAAAA,MAAAA;;;AAMH,QAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB,AAAEH,MAAAA,YADmB,GACoCE,IADpC;AACLD,MAAAA,aADK,GACoCC,IADpC;AACU1D,MAAAA,WADV,GACoC0D,IADpC;AACuB3D,MAAAA,SADvB,GACoC2D,IADpC;AAEtB,KAFD,MAEO;AACL,UAAME,MAAM,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAAR,CAAoB/C,MAApB,CAA2B4C,IAAI,CAAC,CAAD,CAAJ,CAAQI,UAAnC,CAAf;AADK,iBAEoD,CACvDJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,UAAR,CAAmB3B,QADoC,EAEvDuB,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAAR,CAAoB1B,QAFmC,EAGvDyB,MAAM,CAAC5D,WAHgD,EAIvD4D,MAAM,CAAC7D,SAJgD,CAFpD;AAEHyD,MAAAA,YAFG;AAEWC,MAAAA,aAFX;AAE0BzD,MAAAA,WAF1B;AAEuCD,MAAAA,SAFvC;AAQN;;AACD,iCAAMA,SAAN,EAAiBC,WAAjB;AAEA,UAAKwD,YAAL,GAAoBA,YAApB;AACA,UAAKC,aAAL,GAAqBA,aAArB;AACA,UAAKM,MAAL,GAAc,IAAIjE,QAAJ,CACZZ,IAAI,CAACoD,YAAL,CAAkBpD,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAlB,EAAmCD,IAAI,CAACC,MAAL,CAAYqE,YAAY,CAACjB,QAAzB,CAAnC,CADY,EAEZrD,IAAI,CAACoD,YAAL,CAAkBpD,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAlB,EAAmCD,IAAI,CAACC,MAAL,CAAYsE,aAAa,CAAClB,QAA1B,CAAnC,CAFY,CAAd;;AAID;AAED;;;;;AArCF;;AAAA,SAwCSnC,MAxCT,GAwCS;AACL,WAAO,IAAImD,KAAJ,CAAU,KAAKE,aAAf,EAA8B,KAAKD,YAAnC,EAAiD,KAAKzD,SAAtD,EAAiE,KAAKC,WAAtE,CAAP;AACD;AAED;;;;AA5CF;;AAAA,SAgDSS,QAhDT,GAgDS,kBAAuCH,KAAvC;AACL,KAAU,KAAKmD,aAAL,CAAmBd,MAAnB,CAA0BrC,KAAK,CAACkD,YAAhC,CAAV,2CAAAlC,SAAS,QAAgD,OAAhD,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAM+B,QAAQ,uBAAS5C,QAAT,YAAkBH,KAAlB,CAAd;;AACA,WAAO,IAAIiD,KAAJ,CAAU,KAAKC,YAAf,EAA6BlD,KAAK,CAACmD,aAAnC,EAAkDJ,QAAQ,CAACrD,WAA3D,EAAwEqD,QAAQ,CAACtD,SAAjF,CAAP;AACD;AAED;;;;AAtDF;;AAAA,SA0DSiE,KA1DT,GA0DS,eAAMC,cAAN;AACL,KAAUA,cAAc,CAAC9B,QAAf,CAAwBQ,MAAxB,CAA+B,KAAKa,YAApC,CAAV,2CAAAlC,SAAS,QAAoD,OAApD,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAMsC,MAAM,uBAASnD,QAAT,YAAkBwD,cAAlB,CAAZ;;AACA,WAAO/B,cAAc,CAACQ,oBAAf,CAAoC,KAAKe,aAAzC,EAAwDG,MAAM,CAAC7D,SAA/D,EAA0E6D,MAAM,CAAC5D,WAAjF,CAAP;AACD;AAED;;;;AAhEF;;AAAA,SAwESe,aAxET,GAwES,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAKkD,mBAAL,CAAyBnD,aAAzB,CAAuCC,iBAAvC,EAA0DC,MAA1D,EAAkEC,QAAlE,CAAP;AACD,GA1EH;;AAAA,SA4ESY,OA5ET,GA4ES,iBAAQD,aAAR,EAAmCZ,MAAnC,EAAoDC,QAApD;QAAQW;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAKqC,mBAAL,CAAyBpC,OAAzB,CAAiCD,aAAjC,EAAgDZ,MAAhD,EAAwDC,QAAxD,CAAP;AACD,GA9EH;;AAAA;AAAA;AAAA;AAqEI,iCAAaT,QAAb,YAAsB,KAAKsD,MAA3B;AACD;AAtEH;;AAAA;AAAA,EAA4EjE,QAA5E;;ACJA;;;;AAGA,IAAsBqE,YAAtB;AA2BE;;;;;;;AAOA,sBAAsBlI,OAAtB,EAAuCsG,QAAvC,EAAyD6B,MAAzD,EAA0EC,IAA1E;AACE,GAAUjD,MAAM,CAACkD,aAAP,CAAqBrI,OAArB,CAAV,2CAAAqF,SAAS,QAAgC,UAAhC,CAAT,GAAAA,SAAS,OAAT;AACA,IAAUiB,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,GAA5B,IAAmCnB,MAAM,CAACC,SAAP,CAAiBkB,QAAjB,CAA7C,4CAAAjB,SAAS,QAAgE,UAAhE,CAAT,GAAAA,SAAS,OAAT;AAEA,OAAKrF,OAAL,GAAeA,OAAf;AACA,OAAKsG,QAAL,GAAgBA,QAAhB;AACA,OAAK6B,MAAL,GAAcA,MAAd;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD,CA1CH;;ACLA;;;;AAGA,IAAsBE,cAAtB;AAAA;;AAAA;;;;AACkB,kBAAA,GAAiB,IAAjB;AACA,iBAAA,GAAiB,KAAjB;;AACjB;;AAHD;AAAA,EAA6CJ,YAA7C;;ACHA;;;;;AAIA,SAAgBK,wBAAwB5I;AACtC,MAAI;AACF,WAAO6I,UAAU,CAAC7I,OAAD,CAAjB;AACD,GAFD,CAEE,OAAO8I,KAAP,EAAc;AACd,UAAM,IAAIvE,KAAJ,CAAavE,OAAb,8BAAN;AACD;AACF;;AAGD,IAAM+I,yBAAyB,GAAG,qBAAlC;AAEA;;;;;AAIA,SAAgBC,kBAAkBhJ;AAChC,MAAI+I,yBAAyB,CAACE,IAA1B,CAA+BjJ,OAA/B,CAAJ,EAA6C;AAC3C,WAAOA,OAAP;AACD;;AAED,QAAM,IAAIuE,KAAJ,CAAavE,OAAb,8BAAN;AACD;;ACrBD;;;;AAGA,IAAakJ,KAAb;AAAA;;AAgBE;;;;;;;;;;;AAWA,iBACE7I,OADF,EAEEL,OAFF,EAGE2G,QAHF,EAIE6B,MAJF,EAKEC,IALF,EAMEU,cANF,EAOEC,SAPF,EAQEC,UARF;;;AAUE,qCAAMhJ,OAAN,EAAesG,QAAf,EAAyB6B,MAAzB,EAAiCC,IAAjC;AApCc,kBAAA,GAAkB,KAAlB;AACA,iBAAA,GAAgB,IAAhB;;AAoCd,QAAIU,cAAJ,EAAoB;AAClB,YAAKnJ,OAAL,GAAegJ,iBAAiB,CAAChJ,OAAD,CAAhC;AACD,KAFD,MAEO;AACL,YAAKA,OAAL,GAAe4I,uBAAuB,CAAC5I,OAAD,CAAtC;AACD;;AACD,QAAIoJ,SAAJ,EAAe;AACb,OAAUA,SAAS,CAACE,GAAV,CAAcC,SAAS,CAACC,IAAV,CAAe,CAAf,CAAd,CAAV,2CAAA9D,SAAS,QAAmC,uBAAnC,CAAT,GAAAA,SAAS,OAAT;AACD;;AACD,QAAI2D,UAAJ,EAAgB;AACd,OAAUA,UAAU,CAACC,GAAX,CAAeC,SAAS,CAACC,IAAV,CAAe,CAAf,CAAf,CAAV,2CAAA9D,SAAS,QAAoC,uBAApC,CAAT,GAAAA,SAAS,OAAT;AACD;;AACD,UAAK0D,SAAL,GAAiBA,SAAjB;AACA,UAAKC,UAAL,GAAkBA,UAAlB;;AACD;AAED;;;;;;AArDF;;AAAA,SAyDStC,MAzDT,GAyDS,gBAAOrC,KAAP;AACL,WAAOA,KAAK,CAAC2C,OAAN,IAAiB,KAAKhH,OAAL,KAAiBqE,KAAK,CAACrE,OAAxC,IAAmD,KAAKL,OAAL,CAAayJ,WAAb,OAA+B/E,KAAK,CAAC1E,OAAN,CAAcyJ,WAAd,EAAzF;AACD;AAED;;;;;;AA7DF;;AAAA,SAmESC,WAnET,GAmES,qBAAYhF,KAAZ;AACL,MAAU,KAAKrE,OAAL,KAAiBqE,KAAK,CAACrE,OAAjC,4CAAAqF,SAAS,QAAiC,WAAjC,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU,KAAK1F,OAAL,CAAayJ,WAAb,OAA+B/E,KAAK,CAAC1E,OAAN,CAAcyJ,WAAd,EAAzC,4CAAA/D,SAAS,QAA6D,WAA7D,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO,KAAK1F,OAAL,CAAayJ,WAAb,KAA6B/E,KAAK,CAAC1E,OAAN,CAAcyJ,WAAd,EAApC;AACD;AAED;;;AAzEF;;AAAA;AAAA;AAAA;AA6EI,aAAO,IAAP;AACD;AA9EH;;AAAA;AAAA,EAA2BlB,YAA3B;;;ACPA;;;;AAGA,IAAaoB,KAAK,sBACf,CADe,iBACX,IAAIT,KAAJ,CAAU,CAAV,EAAa,4CAAb,EAA2D,EAA3D,EAA+D,MAA/D,EAAuE,eAAvE,CADW,QAEf,CAFe,iBAEX,IAAIA,KAAJ,CAAU,CAAV,EAAa,4CAAb,EAA2D,EAA3D,EAA+D,MAA/D,EAAuE,eAAvE,CAFW,QAGf,CAHe,iBAGX,IAAIA,KAAJ,CAAU,CAAV,EAAa,4CAAb,EAA2D,EAA3D,EAA+D,MAA/D,EAAuE,eAAvE,CAHW,QAIf,CAJe,iBAIX,IAAIA,KAAJ,CAAU,CAAV,EAAa,4CAAb,EAA2D,EAA3D,EAA+D,MAA/D,EAAuE,eAAvE,CAJW,QAKf,EALe,iBAKV,IAAIA,KAAJ,CAAU,EAAV,EAAc,4CAAd,EAA4D,EAA5D,EAAgE,MAAhE,EAAwE,eAAxE,CALU,QAOf,EAPe,iBAOV,IAAIA,KAAJ,CAAU,EAAV,EAAc,4CAAd,EAA4D,EAA5D,EAAgE,MAAhE,EAAwE,eAAxE,CAPU,QAQf,EARe,iBAQV,IAAIA,KAAJ,CAAU,EAAV,EAAc,4CAAd,EAA4D,EAA5D,EAAgE,MAAhE,EAAwE,eAAxE,CARU,QAUf,KAVe,iBAUP,IAAIA,KAAJ,CAAU,KAAV,EAAiB,4CAAjB,EAA+D,EAA/D,EAAmE,MAAnE,EAA2E,eAA3E,CAVO,QAWf,MAXe,iBAWN,IAAIA,KAAJ,CAAU,MAAV,EAAkB,4CAAlB,EAAgE,EAAhE,EAAoE,MAApE,EAA4E,eAA5E,CAXM,QAAX;;ACCP;;;;AAGA,IAAaU,KAAb;AAAA;;AACE,iBAAsBvJ,OAAtB;WACE,2BAAMA,OAAN,EAAe,EAAf,EAAmB,KAAnB,EAA0B,OAA1B;AACD;;AAHH,QAagBwJ,OAbhB,GAaS,iBAAexJ,OAAf;;;AACL,oCAAO,KAAKyJ,WAAL,CAAiBzJ,OAAjB,CAAP,oCAAqC,KAAKyJ,WAAL,CAAiBzJ,OAAjB,IAA4B,IAAIuJ,KAAJ,CAAUvJ,OAAV,CAAjE;AACD,GAfH;;AAAA;;AAAA,SAiBS0G,MAjBT,GAiBS,gBAAOrC,KAAP;AACL,WAAOA,KAAK,CAACqF,QAAN,IAAkBrF,KAAK,CAACrE,OAAN,KAAkB,KAAKA,OAAhD;AACD,GAnBH;;AAAA;AAAA;AAAA;AAMI,UAAM2J,KAAK,GAAGL,KAAK,CAAC,KAAKtJ,OAAN,CAAnB;AACA,OAAU,CAAC,CAAC2J,KAAZ,2CAAAtE,SAAS,QAAU,SAAV,CAAT,GAAAA,SAAS,OAAT;AACA,aAAOsE,KAAP;AACD;AATH;;AAAA;AAAA,EAA2BrB,cAA3B;AAWiBiB,iBAAA,GAA4C,EAA5C;;AClBjB;;;;;;;AAMA,SAAgBK,mBACdC,UACAC,aACAC;AAEA,MAAMC,kBAAkB,GAAGH,QAAQ,CAAC9B,KAAT,CAAe+B,WAAf,CAA3B;;AAEA,MAAMG,WAAW,GAAGD,kBAAkB,CAACvF,QAAnB,CAA4BsF,YAA5B,EAA0ClF,MAA1C,CAAiDmF,kBAAjD,CAApB;AACA,SAAO,IAAI3C,OAAJ,CAAY4C,WAAW,CAACnG,SAAxB,EAAmCmG,WAAW,CAAClG,WAA/C,CAAP;AACD;;ACdD;;AACA,SAAgBmG,aAAgBC,OAAY/F,KAAQgG,SAAiBC;AACnE,IAAUD,OAAO,GAAG,CAApB,4CAAA/E,SAAS,QAAc,eAAd,CAAT,GAAAA,SAAS,OAAT;;AAEA,IAAU8E,KAAK,CAACzC,MAAN,IAAgB0C,OAA1B,4CAAA/E,SAAS,QAA0B,YAA1B,CAAT,GAAAA,SAAS,OAAT;;AAGA,MAAI8E,KAAK,CAACzC,MAAN,KAAiB,CAArB,EAAwB;AACtByC,IAAAA,KAAK,CAACG,IAAN,CAAWlG,GAAX;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,QAAMmG,MAAM,GAAGJ,KAAK,CAACzC,MAAN,KAAiB0C,OAAhC,CADK;;AAGL,QAAIG,MAAM,IAAIF,UAAU,CAACF,KAAK,CAACA,KAAK,CAACzC,MAAN,GAAe,CAAhB,CAAN,EAA0BtD,GAA1B,CAAV,IAA4C,CAA1D,EAA6D;AAC3D,aAAOA,GAAP;AACD;;AAED,QAAIoG,EAAE,GAAG,CAAT;AAAA,QACEC,EAAE,GAAGN,KAAK,CAACzC,MADb;;AAGA,WAAO8C,EAAE,GAAGC,EAAZ,EAAgB;AACd,UAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAN,KAAc,CAA1B;;AACA,UAAIJ,UAAU,CAACF,KAAK,CAACO,GAAD,CAAN,EAAatG,GAAb,CAAV,IAA+B,CAAnC,EAAsC;AACpCoG,QAAAA,EAAE,GAAGE,GAAG,GAAG,CAAX;AACD,OAFD,MAEO;AACLD,QAAAA,EAAE,GAAGC,GAAL;AACD;AACF;;AACDP,IAAAA,KAAK,CAACQ,MAAN,CAAaH,EAAb,EAAiB,CAAjB,EAAoBpG,GAApB;AACA,WAAOmG,MAAM,GAAGJ,KAAK,CAACS,GAAN,EAAH,GAAkB,IAA/B;AACD;AACF;;AC/BM,IAAMC,gBAAgB,gBAAG5H,IAAI,CAACC,MAAL,CAAYiC,MAAM,CAAC0F,gBAAnB,CAAzB;AAEP,IAAMC,IAAI,gBAAG7H,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAM6H,GAAG,gBAAG9H,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAM8H,GAAG,gBAAG/H,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AAEA;;;;;AAIA,SAAgB+H,KAAKC;AACnB,GAAUjI,IAAI,CAACkI,kBAAL,CAAwBD,KAAxB,EAA+BJ,IAA/B,CAAV,2CAAAzF,SAAS,QAAuC,UAAvC,CAAT,GAAAA,SAAS,OAAT;;AAGA,MAAIpC,IAAI,CAACyB,QAAL,CAAcwG,KAAd,EAAqBL,gBAArB,CAAJ,EAA4C;AAC1C,WAAO5H,IAAI,CAACC,MAAL,CAAYkI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACH,IAAL,CAAUhI,IAAI,CAACqI,QAAL,CAAcJ,KAAd,CAAV,CAAX,CAAZ,CAAP;AACD;;AAED,MAAIK,CAAJ;AACA,MAAIC,CAAJ;AACAD,EAAAA,CAAC,GAAGL,KAAJ;AACAM,EAAAA,CAAC,GAAGvI,IAAI,CAACmB,GAAL,CAASnB,IAAI,CAAC4B,MAAL,CAAYqG,KAAZ,EAAmBF,GAAnB,CAAT,EAAkCD,GAAlC,CAAJ;;AACA,SAAO9H,IAAI,CAACyB,QAAL,CAAc8G,CAAd,EAAiBD,CAAjB,CAAP,EAA4B;AAC1BA,IAAAA,CAAC,GAAGC,CAAJ;AACAA,IAAAA,CAAC,GAAGvI,IAAI,CAAC4B,MAAL,CAAY5B,IAAI,CAACmB,GAAL,CAASnB,IAAI,CAAC4B,MAAL,CAAYqG,KAAZ,EAAmBM,CAAnB,CAAT,EAAgCA,CAAhC,CAAZ,EAAgDR,GAAhD,CAAJ;AACD;;AACD,SAAOO,CAAP;AACD;;;;"}
\ No newline at end of file
+{"version":3,"file":"sdk-core.esm.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  UCHAIN = 792,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.UCHAIN,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  UCHAIN = 'TBT',\n  AVAX = 'AVAX',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = constructSameAddressMap(V2_FACTORY_ADDRESS, [\n  ChainId.POLYGON,\n  ChainId.OPTIMISM,\n  ChainId.CELO,\n  ChainId.ARBITRUM_ONE,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n])\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = constructSameAddressMap(V2_ROUTER_ADDRESS)\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// celo v3 addresses\nconst UCHAIN_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xD7F71EE33DCb17AAb183b6173423fD7C95866F32',\n  multicallAddress: '0x2621027bD033Ce003e34c6f4BaD927E366c0F5B5',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0xc8b8d86996aaB4fc79c1630e2D2C7e7e7E5C583F',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.UCHAIN]: UCHAIN_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (chainId == ChainId.BNB) {\n    return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\n  }\n  return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [792]: new Token(792, '0x1D7A42e67F9C5592d1927a7B47e32Ae809561fE0', 18, 'WTBT', 'Wrapped TBT'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","ARBITRUM_ONE","ARBITRUM_GOERLI","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","UCHAIN","AVALANCHE","BASE","BASE_GOERLI","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","UCHAIN_ADDRESSES","OPTIMISM_GOERLI_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","constructor","numerator","denominator","tryParseFraction","fractionish","Error","quotient","divide","remainder","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","asFraction","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","wrapped","isToken","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","weth9","onChain","_etherCache","isNative","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
